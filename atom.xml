<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杜若喃呢</title>
  <subtitle>山中人兮芳杜若</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://duruonanni.com/"/>
  <updated>2017-06-22T04:26:20.169Z</updated>
  <id>http://duruonanni.com/</id>
  
  <author>
    <name>Xiangyu Kong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java笔记_05数组(Array)</title>
    <link href="http://duruonanni.com/JavaNotes_Day05/20170622.html"/>
    <id>http://duruonanni.com/JavaNotes_Day05/20170622.html</id>
    <published>2017-06-22T04:28:30.314Z</published>
    <updated>2017-06-22T04:26:20.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>呐~这套<code>Java笔记</code>是博主在学习<strong>Java基础</strong>期间所做的笔记,现整理后分享给需要的同学.对,这会是本博客的第一个系列小文哦.<br>本笔记主要涉及Java基础学习中的知识点梳理和实际操作中的一点心得分享.<br>本笔记适合想要复习Java基础知识的同学快速查漏补缺,当然,也适合Java初学者的查阅.<br>对啦: 本文以JDK1.7为基准,但后期会加上一些JDK1.8新特性的讲解.<br>因为博主的技浅才疏,本文中的知识点也不够全面.如有错误,还望指正;如有好的建议,还望不吝赐教.<br>🐱‍👤正文开始啦~  </p>
<h1 id="Day05-数组-Array"><a href="#Day05-数组-Array" class="headerlink" title="Day05 数组(Array)"></a>Day05 数组(Array)</h1><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><p>数组是一种数据结构,用来存储数量确定的同一类型值的集合.</p>
<h3 id="数组的语法"><a href="#数组的语法" class="headerlink" title="数组的语法"></a>数组的语法</h3><p>语法1:(未赋初值,赋予其默认值)<br><code>数据类型[] 数组名 = new 数据类型[元素个数或者数组长度];</code><br>语法2:(赋初值,数组长度等于初值个数)<br><code>数据类型[] 数组名 = new {元素0值,元素1值,...,元素n值};</code></p>
<h3 id="数组的调用"><a href="#数组的调用" class="headerlink" title="数组的调用"></a>数组的调用</h3><ul>
<li>数组中的每个元素都有一个<strong>索引</strong>.</li>
<li>数组中最小的索引是0,最大的索引是”数组长度-1”</li>
<li>数组中的值通过索引调用访问</li>
<li>数组是引用元素,在方法中调用时,其传入参数改变,本身值也会变的</li>
<li>数组未初始化时,系统会默认给他赋予一个初值,不同类型的数据,其初始默认值如下:<ul>
<li>整数类型:byte,short,int,long –&gt; <code>0</code>;</li>
<li>浮点数类型:float,double –&gt; ‘0.0’;</li>
<li>字符类型:char –&gt; ‘\u0000<code>即一个空字符(空格)</code>;</li>
<li>布尔类型:boolean –&gt; <code>false</code>;</li>
<li>引用数据类型:String,类,数组… –&gt; <code>null</code>表示不引用任何元素<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3>操作数组时,依次访问数组中的每个元素,叫做数组的遍历.常通过<code>for</code>循环语句执行数组的遍历;  </li>
</ul>
</li>
</ul>
<h2 id="数组中的常见问题"><a href="#数组中的常见问题" class="headerlink" title="数组中的常见问题"></a>数组中的常见问题</h2><ul>
<li>数组中处理最值问题(引入一个第三方临时变量,赋予其索引0的值,再通过遍历比对大小进行值转换,最终比较出最大的值)</li>
<li>数组中的异常<ul>
<li>数组越界异常 <code>ArrayIndexOutOfBoundsException</code><ul>
<li>数组调用时,索引超出范围</li>
</ul>
</li>
<li>空指针异常 <code>NullPointerException</code><ul>
<li>指数组变量在调用时,其值为<code>null</code>即未指向任何数据</li>
<li>常出现在引用类型的数组当中,要注意对数组中值的正确赋值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>定义:在数组中嵌套的数组(数组中值的类型是数组)<br>语法:  </p>
<ol>
<li>元素长度确定的数组<br><code>int[][] arr = new int[3][4];</code></li>
<li>元素长度不确定的数组<br><code>int[][] arr = new int[3][];</code></li>
<li>边定义边赋值的数组<br><code>int[][] arr = {{1,2} , {3,4,5,6} , {7,8,9}}</code>;<br>二维数组的访问语法:<br><code>arr[0][1]</code></li>
</ol>
<h2 id="数组在Java中的内存分配"><a href="#数组在Java中的内存分配" class="headerlink" title="数组在Java中的内存分配"></a>数组在Java中的内存分配</h2><ul>
<li>栈内存:       用于执行方法,每次方法调用的时候,都会在栈内存的最上面开辟一段空间,用于该方法的执行<ul>
<li>栈内存特点: 先进后出,空间较小,运行较快</li>
</ul>
</li>
<li>堆内存:<br>用于存放数据量较大的数据,例如数组,对象:只要是new关键字创建出来的数据体,都在堆内存中<ul>
<li>堆内存特点: 空间较大,运行较慢,具备垃圾回收机制  </li>
</ul>
</li>
<li>方法区: 用于存放类的字节码对象,还有一些静态变量,和常量  </li>
<li>本地方法区: 存放和系统相关的运行方法,还有其他语言相关的方法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;呐~这套&lt;code&gt;Java笔记&lt;/code&gt;是博主在学习&lt;strong&gt;Java基础&lt;/strong&gt;期间
    
    </summary>
    
      <category term="笔记" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="笔记" scheme="http://duruonanni.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记_04方法(Method)</title>
    <link href="http://duruonanni.com/JavaNotes_Day04/20170622.html"/>
    <id>http://duruonanni.com/JavaNotes_Day04/20170622.html</id>
    <published>2017-06-22T04:20:40.890Z</published>
    <updated>2017-06-22T04:24:03.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>呐~这套<code>Java笔记</code>是博主在学习<strong>Java基础</strong>期间所做的笔记,现整理后分享给需要的同学.对,这会是本博客的第一个系列小文哦.<br>本笔记主要涉及Java基础学习中的知识点梳理和实际操作中的一点心得分享.<br>本笔记适合想要复习Java基础知识的同学快速查漏补缺,当然,也适合Java初学者的查阅.<br>对啦: 本文以JDK1.7为基准,但后期会加上一些JDK1.8新特性的讲解.<br>因为博主的技浅才疏,本文中的知识点也不够全面.如有错误,还望指正;如有好的建议,还望不吝赐教.<br>🐱‍👤正文开始啦~  </p>
<h1 id="Day04-方法-Method"><a href="#Day04-方法-Method" class="headerlink" title="Day04 方法(Method)"></a>Day04 方法(Method)</h1><h2 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h2><p>方法是包含多种语句来完成某件事情或者实现某个功能的代码块.  </p>
<h2 id="方法的语法"><a href="#方法的语法" class="headerlink" title="方法的语法"></a>方法的语法</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">修饰符 返回值类型 方法名(参数类型 参数名<span class="number">1</span>,参数类型 参数名<span class="number">2</span>,......) &#123;</div><div class="line">	执行语句</div><div class="line">	......</div><div class="line">	return 返回值;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明: </p>
<ul>
<li>修饰符,访问权限修饰符,限定该方法的调用范围,后面会详细讲</li>
<li>返回值类型: 限定方法返回值的类型,方法的返回值只有一个,可通过其他方法实现多个返回值,后面讲</li>
<li>参数类型,参数名:没什么好说的,注意形参和实际参数的区别和联系;</li>
<li><code>return</code>关键字: 用于结束方法及返回方法指定类型的值;</li>
<li>    返回值：被return语句返回的值，该值会返回给调用者;</li>
</ul>
<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>定义:<br>方法名相同,其中传入的参数类别或者传出的数据类型不同.在调用时,系统通过调用时不同的参数类别或数据类型判定出需要的方法进行运算.<br>条件:<br>方法名相同,参数个数或者参数类型不同.<br>注意:<br>如果重载和返回值类型无关  </p>
<h2 id="参数传递详解"><a href="#参数传递详解" class="headerlink" title="参数传递详解"></a>参数传递详解</h2><p>定义:  </p>
<ul>
<li>调用方法时,将指定的数值,传递给方法中的参数,叫做参数传递;</li>
<li><strong>定义方法</strong>时,参数列表中的变量,称为:<strong>形式参数</strong></li>
<li><strong>调用方法</strong>时,传入给方法的数值,称为:<strong>实际参数</strong></li>
</ul>
<h2 id="方法使用中的注意事项"><a href="#方法使用中的注意事项" class="headerlink" title="方法使用中的注意事项"></a>方法使用中的注意事项</h2><ul>
<li>方法只有被调用才会执行,不调用不执行</li>
<li>方法和方法是平级关系,不能嵌套定义<ul>
<li>一个方法中不能定义另一个方法</li>
</ul>
</li>
<li>只要访问权限允许,方法中就能调用其它方法,也能调用自己本身的方法<ul>
<li>自己调用自己叫做<strong>递归</strong></li>
</ul>
</li>
<li>定义方法时,参数列表中的形式参数之间用<code>,</code>逗号隔开</li>
<li>方法在声明时,形式参数需要写数据类型,为了开辟特定的内存空间</li>
<li>方法在调用时,实参不用写数据类型</li>
<li>如果方法声明时有返回值,在声明的代码中一定要正确返回该类型的值<ul>
<li>如果方法声明是<code>void</code>,可以不用<code>return</code>;<br>方法调用的注意事项:  </li>
</ul>
</li>
<li>调用方法时,若传入的值为基本数据类型,形式参数中值的改变不会影响到实际参数;</li>
<li>调用方法时,若传入的值为引用数据类型(如:数组),形式参数中值的改变会影响到实际参数的值;</li>
<li><strong>String</strong>参数具有特殊的<code>只读性</code>,故在传入后,其形参变化不会影响实参的值;</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;呐~这套&lt;code&gt;Java笔记&lt;/code&gt;是博主在学习&lt;strong&gt;Java基础&lt;/strong&gt;期间
    
    </summary>
    
      <category term="笔记" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="笔记" scheme="http://duruonanni.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记_03Scanner接收键盘录入&amp;程序结构</title>
    <link href="http://duruonanni.com/JavaNotes_Day03/20170622.html"/>
    <id>http://duruonanni.com/JavaNotes_Day03/20170622.html</id>
    <published>2017-06-22T04:13:22.157Z</published>
    <updated>2017-06-22T04:17:09.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>呐~这套<code>Java笔记</code>是博主在学习<strong>Java基础</strong>期间所做的笔记,现整理后分享给需要的同学.对,这会是本博客的第一个系列小文哦.<br>本笔记主要涉及Java基础学习中的知识点梳理和实际操作中的一点心得分享.<br>本笔记适合想要复习Java基础知识的同学快速查漏补缺,当然,也适合Java初学者的查阅.<br>对啦: 本文以JDK1.7为基准,但后期会加上一些JDK1.8新特性的讲解.<br>因为博主的技浅才疏,本文中的知识点也不够全面.如有错误,还望指正;如有好的建议,还望不吝赐教.<br>🐱‍👤正文开始啦~  </p>
<h1 id="Day03-Scanner接收键盘录入-amp-程序结构"><a href="#Day03-Scanner接收键盘录入-amp-程序结构" class="headerlink" title="Day03 Scanner接收键盘录入&amp;程序结构"></a>Day03 Scanner接收键盘录入&amp;程序结构</h1><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>Scanner类的作用: 接收键盘录入</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤:"></a>使用步骤:</h3><ol>
<li>导包<br> 在主类声明之外,写导包语句(通常写在代码最开头):<br> <code>import java.util.Scanner;</code>  </li>
<li>创建键盘录入对象<br><code>Scanner s = new Scanner(System.in);</code><br>注意: 引用类型变量的定义格式:<br><code>数据类型 变量名 = new 数据类型();</code></li>
<li>使用<code>Scanner</code>对象<code>sc</code>的<code>nextInt()</code>方法,获取键盘录入的数字<br> <code>int x = s.nextInt();</code>  </li>
<li>使用<code>Scanner</code>对象<code>sc</code>的<code>next()</code>方法,获取键盘录入的值<br> <code>String str = s.next();</code></li>
</ol>
<h2 id="程序的结构"><a href="#程序的结构" class="headerlink" title="程序的结构"></a>程序的结构</h2><h3 id="程序的机构分类"><a href="#程序的机构分类" class="headerlink" title="程序的机构分类:"></a>程序的机构分类:</h3><ol>
<li>顺序结构</li>
<li>分支结构</li>
<li>循环结构</li>
</ol>
<h3 id="分支结构介绍"><a href="#分支结构介绍" class="headerlink" title="分支结构介绍:"></a>分支结构介绍:</h3><ul>
<li><code>if-else-if</code>语句  </li>
<li><code>switch-case</code>语句  <ul>
<li>注意: <code>break</code>不能省略;将<code>default</code>放到最后  </li>
</ul>
</li>
</ul>
<h3 id="循环结构介绍"><a href="#循环结构介绍" class="headerlink" title="循环结构介绍"></a>循环结构介绍</h3><p>Java中使用的循环种类:</p>
<ul>
<li><code>for</code>循环</li>
<li><code>while</code>循环</li>
<li><code>do-while;</code>循环</li>
</ul>
<h4 id="控制循环的语句"><a href="#控制循环的语句" class="headerlink" title="控制循环的语句"></a>控制循环的语句</h4><ul>
<li><code>continue</code>:立即结束本次循环,重新从头开始下一次循环;</li>
<li><code>break</code>: 立即结束当前循环,跳出循环进入下面的代码;</li>
<li><code>return</code>: 结束当前方法(相当于break只能跳出一个循环,如果循环外是另一个循环,则执行外部循环的内容;而return是结束所有的循环,跳出循环外);</li>
<li><code>System.exit()</code>:直接结束虚拟机,结束所有程序</li>
</ul>
<h4 id="循环结构的注意事项"><a href="#循环结构的注意事项" class="headerlink" title="循环结构的注意事项:"></a>循环结构的注意事项:</h4><ul>
<li>循环和循环之间可以嵌套;</li>
<li>循环语句中新建的变量不能被外部调用到,所以尽量将需要调用的变量声明在循环之外;</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;呐~这套&lt;code&gt;Java笔记&lt;/code&gt;是博主在学习&lt;strong&gt;Java基础&lt;/strong&gt;期间
    
    </summary>
    
      <category term="笔记" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="笔记" scheme="http://duruonanni.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记_02数据类型&amp;运算符</title>
    <link href="http://duruonanni.com/JavaNotes_Day02/20170622.html"/>
    <id>http://duruonanni.com/JavaNotes_Day02/20170622.html</id>
    <published>2017-06-22T03:55:59.269Z</published>
    <updated>2017-06-22T03:59:59.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>呐~这套<code>Java笔记</code>是博主在学习<strong>Java基础</strong>期间所做的笔记,现整理后分享给需要的同学.对,这会是本博客的第一个系列小文哦.<br>本笔记主要涉及Java基础学习中的知识点梳理和实际操作中的一点心得分享.<br>本笔记适合想要复习Java基础知识的同学快速查漏补缺,当然,也适合Java初学者的查阅.<br>对啦: 本文以JDK1.7为基准,但后期会加上一些JDK1.8新特性的讲解.<br>因为博主的技浅才疏,本文中的知识点也不够全面.如有错误,还望指正;如有好的建议,还望不吝赐教.<br>🐱‍👤正文开始啦~  </p>
<h1 id="Day02-数据类型-amp-运算符"><a href="#Day02-数据类型-amp-运算符" class="headerlink" title="Day02 数据类型&amp;运算符"></a>Day02 数据类型&amp;运算符</h1><h2 id="数据类型介绍"><a href="#数据类型介绍" class="headerlink" title="数据类型介绍"></a>数据类型介绍</h2><ul>
<li><p>基本数据类型: 字节类型,整数类型,小数,字符类型,布尔类型</p>
</li>
<li><p>引用数据类型: 将基本数据类型进行包装,组合,形成比较复杂的数据,用于描述更复杂的对象,将这些为这些复杂的数据体提供一个地址,通过该地址引用那些更复杂的数据.所以也叫:<strong>地址数据类型</strong></p>
</li>
</ul>
<h2 id="进制介绍"><a href="#进制介绍" class="headerlink" title="进制介绍"></a>进制介绍</h2><ul>
<li><p>二进制(<code>binary</code>):逢二进一:数据前加<code>0b</code>;</p>
<ul>
<li>计算机中所有的数据本质都是用二进制类进行存储和计算的</li>
</ul>
</li>
<li><p>八进制(<code>octonary</code>[可联想<code>october</code>–&gt;8月]):逢八进一:数据前加<code>0</code>;</p>
</li>
<li><p>十六进制(<code>hexadecimal</code>):逢十六进一:数据前加<code>0x</code>;</p>
</li>
<li><p>十进制(<code>decimal</code>):是默认的</p>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>概述: 在程序运行过程中,值可以发生变化的量;</p>
</li>
<li><p>为便于理解,可认为: 变量是内存中装载数据的小盒子,可用来存或者取用特定的数据;</p>
</li>
<li><p>格式: 数据类型 变量名 = 变量值; eg: <code>byte b = 10;</code></p>
<ul>
<li>注意: 这里的<code>=</code>不是等号,而是赋值符号,意味着将10这个值赋予b这个byte类型的变量  </li>
</ul>
</li>
</ul>
<h3 id="位-bit-和字节-byte-介绍"><a href="#位-bit-和字节-byte-介绍" class="headerlink" title="位(bit)和字节(byte)介绍"></a>位(bit)和字节(byte)介绍</h3><ul>
<li>位(bit): 是计算机中<strong>存储数据的最小类型</strong>,常用<code>b</code>表示,位的值为<code>0</code>或者<code>1</code>;</li>
<li>字节(byte): 是计算机中的<strong>最小存储单元</strong>,常用<code>B</code>表示,一个字节(byte)由连续的8个位(bit)组成;</li>
</ul>
<h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型:"></a>变量的类型:</h3><ul>
<li>基本数据类型(<strong>四类八种</strong>):<ol>
<li>整数类型:<ul>
<li>byte 字节型 一个字节表示 -128~127</li>
<li>short 短整形 两个字节表示</li>
<li>int 整形(整数默认类型) 四个字节表示</li>
<li>long 长整形 八个字节表示,声明该类型要在值后面加<code>L</code></li>
</ul>
</li>
<li>小数类型:<ul>
<li>float 单精度浮点型 四个字节表示<ul>
<li>声明浮点类型要在变量值后面加<code>F</code>否则报错,因为小数类型的默认值是<code>double</code></li>
</ul>
</li>
<li>double 双精度浮点型(默认) 八个字节表示</li>
</ul>
</li>
<li>布尔类型<ul>
<li>boolean 表示T和F的类型 使用一个字节表示</li>
</ul>
</li>
<li>字节类型<ul>
<li>char 表示一个单字符 使用两个字节表示<ul>
<li>char类型值的编码与解码:  字符类型其实不能直接存储到计算机内存中，而是需要先将字符，根据编码表，转换成数字，进行存储，将来读取的时候，先将数字读取出来，然后查询编码表，看下这个数字对应的字符是什么，翻译回来<br>这个编码表，英文部分，统统用的都是<code>ASCII</code>码表<br><strong>ASCII码表其实就是字符和数字的一个对应关系</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="定义变量时的注意事项"><a href="#定义变量时的注意事项" class="headerlink" title="定义变量时的注意事项"></a>定义变量时的注意事项</h3><ul>
<li>作用域:(变量能正确使用的有效位置)<ol>
<li>变量在哪个大括号中定义,就可以在哪个大括号中使用</li>
<li>在同一个变量的作用域内,不能重复定义相同名称的变量(同名不同类型也不行)</li>
</ol>
</li>
<li>初始化:(对变量赋初值)<ul>
<li>在方法中定义的变量,或者局部变量,必须先声明(说明变量类型),再赋值(给变量初值),才能正确使用;</li>
<li>变量定义后可以不赋值,但是使用时必须赋值;</li>
</ul>
</li>
</ul>
<h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><ul>
<li>隐式转换:系统直接给转<ul>
<li>遵循小转大:字节数少的转字节数多的,直接转,类型自动变为字节数多的那种</li>
<li><code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>
<li>注意: 在程序运行中如果因为计算或赋值超范围,系统是不会对原变量类型自动转换的,而是直接报错</li>
</ul>
</li>
<li>强制转换<ul>
<li>格式: (要转换的类型)(被转换的变量)</li>
<li>注意: 某些时候使用强转,会因为二进制的原因,造成转换后的值和原值不同</li>
</ul>
</li>
</ul>
<h3 id="Java的常量优化机制"><a href="#Java的常量优化机制" class="headerlink" title="Java的常量优化机制"></a>Java的常量优化机制</h3><ul>
<li>在Java程序编译阶段,会将简单的常量运算结果进行计算后再运行.这样的好处是:<ol>
<li>程序运行更高效</li>
<li>在String类型变量存入数据时,若常量优化(相加运算)后几个变量值相同,会默认将几个变量的值指向内存中同一个位置,使程序运行时占用内存更少,效率更高</li>
</ol>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>常见算术运算符:</p>
<ul>
<li><code>+</code> 正号;加号;字符串链接符号(可将任意类型变量值添加到字符串中)</li>
<li><code>-</code> 负号:eg: <code>int a = 3; -a;</code> 输出a的值为-3;减号</li>
<li><code>*</code> 乘号</li>
<li><code>/</code> 除号 注意:整数类型相除,省略小数点后的值</li>
<li><code>%</code> 取余符号</li>
<li><code>++</code> 自增符号:原值+1</li>
<li><code>--</code> 自减符号<ul>
<li>注意<code>++</code>和<code>--</code>与变量名位置不同的不同效果</li>
<li>在变量名前<code>++x</code>:先自加再运算</li>
<li>在变量名后<code>x--</code>:先自减再运算</li>
</ul>
</li>
</ul>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>常见的赋值运算符</p>
<ul>
<li><code>=</code> 赋值</li>
<li><code>+=</code> 原值加上等号后的值再赋值<ul>
<li>eg: <code>int a = 2; a += 3;</code> 结果: <code>5</code></li>
</ul>
</li>
<li><code>-=</code> 原值减去等号后的值再赋值</li>
<li><code>*=</code></li>
<li><code>/=</code></li>
<li><code>%=</code></li>
</ul>
<h3 id="比较运算符-关系运算符"><a href="#比较运算符-关系运算符" class="headerlink" title="比较运算符(关系运算符)"></a>比较运算符(关系运算符)</h3><p>比较运算符的比较的结果是boolean类型</p>
<ul>
<li><code>==</code> 等于</li>
<li><code>!=</code> 不等于</li>
<li><code>&lt;</code> 小于</li>
<li><code>&lt;=</code> 小于或者等于</li>
<li><code>&gt;</code> 大于</li>
<li><p><code>&gt;=</code> 大于或者等于<br>思考: </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int a = <span class="number">3</span><span class="comment">;</span></div><div class="line">int <span class="keyword">b </span>= <span class="number">4</span><span class="comment">;</span></div><div class="line">System.out.println( a=<span class="keyword">b </span>)<span class="comment">;</span></div><div class="line">System.out.println( a==<span class="keyword">b </span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>  上面代码输出的结果第一个值为4，第二个值为false。为什么?</p>
</li>
</ul>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符的运算结果是boolean类型</p>
<ul>
<li><code>&amp;</code> 与:都T为T</li>
<li><code>&amp;&amp;</code> 短路与</li>
<li><code>|</code> 或:有T则T</li>
<li><code>||</code> 短路或</li>
<li><code>^</code> 异或(就是只能有一个T,双F或者双T都返回F)</li>
<li><code>!</code> 非(eg:<code>!true</code>值是<code>false</code>)</li>
<li><code>短路</code>和<code>非短路</code>的区别: <ul>
<li><code>短路与</code>只要等式左边<code>F</code>就不判断右边的,直接值为<code>F</code>;</li>
<li><code>短路或</code>只要等式左边为<code>T</code>就不判断右边的额,直接值为<code>T</code></li>
<li>相对来说,<code>短路</code>的逻辑运算符效率更高,平时多用<code>短路</code></li>
</ul>
</li>
</ul>
<h3 id="位运算符-了解"><a href="#位运算符-了解" class="headerlink" title="位运算符(了解)"></a>位运算符(了解)</h3><p>运算二进制的运算符,其符号和逻辑运算符相同,视操作内容不同而区分</p>
<ul>
<li><code>&amp;</code> 二进制与,全1则1,否则为0<ul>
<li>eg: 10&amp;15 : 0000 1010 &amp; 0000 1111 结果 0000 1010     <code>10</code></li>
</ul>
</li>
<li><code>|</code> 二进制或,全0则0,否则为1</li>
<li><code>^</code> 二进制异或,相同为0,不同为1;</li>
<li><code>~</code> 二进制非,遇0则1,遇1则0</li>
</ul>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>格式:<br>    <code>(条件表达式)？表达式1：表达式2；</code><br>理解:<br>    对<code>条件表达式</code>进行判定,值为T,运行<code>表达式1</code>;值为F,运行<code>表达式2</code></p>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;呐~这套&lt;code&gt;Java笔记&lt;/code&gt;是博主在学习&lt;strong&gt;Java基础&lt;/strong&gt;期间
    
    </summary>
    
      <category term="笔记" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="笔记" scheme="http://duruonanni.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记_01Java基础介绍</title>
    <link href="http://duruonanni.com/JavaNotes_Day01/20170622.html"/>
    <id>http://duruonanni.com/JavaNotes_Day01/20170622.html</id>
    <published>2017-06-22T03:33:55.409Z</published>
    <updated>2017-06-22T03:46:46.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>呐~这套<code>Java笔记</code>是博主在学习<strong>Java基础</strong>期间所做的笔记,现整理后分享给需要的同学.对,这会是本博客的第一个系列小文哦.<br>本笔记主要涉及Java基础学习中的知识点梳理和实际操作中的一点心得分享.<br>本笔记适合想要复习Java基础知识的同学快速查漏补缺,当然,也适合Java初学者的查阅.<br>对啦: 本文以JDK1.7为基准,但后期会加上一些JDK1.8新特性的讲解.<br>因为博主的技浅才疏,本文中的知识点也不够全面.如有错误,还望指正;如有好的建议,还望不吝赐教.<br>🐱‍👤正文开始啦~  </p>
<h1 id="Day01随堂笔记"><a href="#Day01随堂笔记" class="headerlink" title="Day01随堂笔记"></a>Day01随堂笔记</h1><h2 id="JDK-JRE-JVM介绍"><a href="#JDK-JRE-JVM介绍" class="headerlink" title="JDK,JRE,JVM介绍"></a>JDK,JRE,JVM介绍</h2><ul>
<li>JDK:<code>JavaSE Development Kit</code> – <code>Java开发工具包</code></li>
<li>JRE:<code>Java Runtime Environment</code> – <code>Java运行时环境</code></li>
<li>JVM: <code>java Virtual Machine</code> – <code>Java虚拟机</code></li>
<li>一切Java文件都运行在JVM虚拟机中,来达到全平台运行</li>
<li>JRE = JVM + 核心类库</li>
<li>JDK = JRE + 开发工具</li>
<li>电脑上有JRE可以运行Java程序,但是不能进行开发</li>
<li>电脑上有JDK才能开发Java程序</li>
<li>目前JDK的最新版本时JDK8</li>
</ul>
<h2 id="写一个HelloWorld"><a href="#写一个HelloWorld" class="headerlink" title="写一个HelloWorld"></a>写一个<code>HelloWorld</code></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"HelloWorld"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java书写时的注意事项"><a href="#Java书写时的注意事项" class="headerlink" title="Java书写时的注意事项:"></a>Java书写时的注意事项:</h2><ul>
<li>Java程序的后缀名为<code>.java</code></li>
<li>Java程序中区分大小写</li>
<li>括号匹配: 所有的括号都成对出现,为了防止程序少括号,建议先写前后括号,再写括号中的内容</li>
<li>标点符号: Java代码中要求所有的标点符号都是英文状态的,为了避免输入错误,建议在输入法中调整成在中文状态下,使用英文标点.</li>
<li>分号:每个句子以分号结束.注意句子结束一定要加分号.  </li>
</ul>
<h2 id="Java代码书写格式"><a href="#Java代码书写格式" class="headerlink" title="Java代码书写格式"></a>Java代码书写格式</h2><ul>
<li>括号对齐<ul>
<li>右括号换行,对齐本层代码中的第一个字母;</li>
<li>左括号和第一行代码同行,在写之前加一个空格;</li>
<li>写左括号的第一行代码要缩进,该行代码里面的内容要缩进;</li>
<li>所有运算符的两边都添加空格.eg <code>1 + 1 + 3 + 3</code>;</li>
</ul>
</li>
</ul>
<h2 id="注释-关键字-标识符"><a href="#注释-关键字-标识符" class="headerlink" title="注释,关键字,标识符"></a>注释,关键字,标识符</h2><ul>
<li>注释和分类<ul>
<li>注释: 对程序进行解释说明的内容,不作为程序运行的一部分.</li>
<li>注释的作用: </li>
</ul>
<ol>
<li>注销暂时不运行的代码;</li>
<li>对当前运行的代码进行文字说明;</li>
</ol>
<ul>
<li>注释的分类:<ul>
<li>单行注释: <code>//</code></li>
<li>多行注释: <code>/* 注释的内容,里面可换行 */</code></li>
<li>文档注释: <code>/** 注释的内容 */</code><ul>
<li>文档注释可以使用<code>javadoc.exe</code>命令生成API文档</li>
</ul>
</li>
</ul>
</li>
<li>关键字:  <ul>
<li>Java中的基本语句,在编辑器中常被高亮显示</li>
<li>Java关键字都是小写字母单词组成的</li>
</ul>
</li>
<li>标识符:  <ul>
<li>定义: 用于给类,接口,变量,方法,常量起名字的字符序列</li>
<li>组成: 英文大小写<code>a-zA-Z</code>; 数字<code>0-9</code>; 特殊符号<code>$</code>  <code>_</code></li>
<li>注意: <code>$</code> 常用于系统生成的标识符中,自己最好不要使用这个符号</li>
</ul>
</li>
<li>标识符规则:  <ol>
<li>标识符不能和关键字相同</li>
<li>标识符不能以数字开头</li>
<li>标识符严格区分大小写</li>
</ol>
</li>
<li>标识符命名习惯:  <ul>
<li>类和接口: 帕斯卡(pascal)命名法: 大大大(每个单词的首字母都要大写) eg: <code>MyTest</code></li>
<li>变量和方法: 骆驼(camel)命名法: 小大大(首单词小写后面单词首字母大写) eg: <code>personName</code></li>
<li>常量,字段: 所有字母大写,单词和单词之间使用下划线分割 eg: <code>PI</code> <code>MAX_VALUE</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="程序概述"><a href="#程序概述" class="headerlink" title="程序概述"></a>程序概述</h3><p>程序: 数据 + 逻辑<br>软件: - “数据”;<br>    |_ “处理数据的逻辑”;<br><strong>通常数据会发生变化,但是数据逻辑时不发生变化的</strong>.</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>基本数据类型<ul>
<li>字节类型: <code>byte</code></li>
<li>整数类型: <code>short</code> , <code>int</code> , <code>long</code></li>
<li>小数类型: <code>float</code> , <code>double</code></li>
<li>字符类型: <code>char</code></li>
<li>布尔类型: <code>boolean</code><ul>
<li>布尔类型的数据值是: <code>true</code> 和 <code>false</code></li>
</ul>
</li>
</ul>
</li>
<li>引用数据类型(后面会详细讲)<ul>
<li>字符串类型: <code>String</code><ul>
<li>注意大小写</li>
</ul>
</li>
<li>数组类型: </li>
<li>类类型:</li>
<li>接口类型:</li>
<li>注意: 在Java中,<code>基本数据类型</code>的类型名都是首字母小写单词;<code>引用数据类型</code>的类型名都是首字母大写的单词;  </li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;呐~这套&lt;code&gt;Java笔记&lt;/code&gt;是博主在学习&lt;strong&gt;Java基础&lt;/strong&gt;期间
    
    </summary>
    
      <category term="笔记" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://duruonanni.com/categories/%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="笔记" scheme="http://duruonanni.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Chrome插件突破百度云限速方法</title>
    <link href="http://duruonanni.com/Chrome%E6%8F%92%E4%BB%B6%E7%AA%81%E7%A0%B4%E7%99%BE%E5%BA%A6%E4%BA%91%E9%99%90%E9%80%9F%E6%96%B9%E6%B3%95/20170529.html"/>
    <id>http://duruonanni.com/Chrome插件突破百度云限速方法/20170529.html</id>
    <published>2017-05-29T12:27:00.000Z</published>
    <updated>2017-05-29T13:58:48.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在之前的话"><a href="#写在之前的话" class="headerlink" title="写在之前的话"></a>写在之前的话</h2><p>呐,今年6月1日(也就是大后天)开始,<a href="http://www.tmtpost.com/2606559.html" title="百度网盘6月1日起实行实名制，未认证将遭强退" target="_blank" rel="external">百度就全面强制实行账号实名制</a>了.嗯……<br>好吧,闲话不多说,这就奉上迟到的:迂回突破百度云限制方法.🐱‍💻  </p>
<ul>
<li>本教程仅适用于<strong>Chrome内核浏览器</strong><ul>
<li>查看是否为该内核,只要进入<code>浏览器设置</code>-<code>关于页面</code>,显示<code>Chromium</code>,就对啦</li>
<li>eg: <a href="https://www.centbrowser.com/" title="centbrowser" target="_blank" rel="external">centbrowser</a><br><img src="http://storage.live.com/items/AEE68C12565C1619!174701?authkey=AJoh90nl3u6Wj4U" alt="centbrowser">  </li>
</ul>
</li>
</ul>
<p>本教程参考了:<a href="http://bbs.kafan.cn/thread-2088255-1-1.html" title="突破百度云限速最新方法" target="_blank" rel="external">卡饭论坛:2017 突破百度云限速最新方法</a>  </p>
<h3 id="本教程相对原教程的区别"><a href="#本教程相对原教程的区别" class="headerlink" title="本教程相对原教程的区别:"></a>本教程相对原教程的区别:</h3><ul>
<li><strong>无需科学上网</strong>进入Google WebStore(插件商店)下载User-Agent Switcher插件;<ul>
<li>因为我已经下载并打包好插件了,免翻墙,直接安装即可下载</li>
<li>当前User-Agent Switcher版本为1.0.43_0</li>
<li>下载User-Agent Switcher点 <a href="http://storage.live.com/items/AEE68C12565C1619!174699?authkey=AJoh90nl3u6Wj4U" title="插件下载地址" target="_blank" rel="external">这里</a></li>
</ul>
</li>
<li><strong>无需安装IDM下载器</strong><ul>
<li>要知道IDM的确很强大,但它并不是一款免费软件哦,建议有需要的同学支持正版;<ul>
<li>还是不用吧,正版相当贵(对我来说是)…</li>
</ul>
</li>
<li>所以,这里将使用浏览器自带的下载器;</li>
<li>需要更强大下载功能(断点续传…)的同学,建议安装<a href="http://www.eagleget.com/" target="_blank" rel="external">eagleget</a>软件;  </li>
</ul>
</li>
</ul>
<h3 id="本教程原理推测"><a href="#本教程原理推测" class="headerlink" title="本教程原理推测:"></a>本教程原理推测:</h3><p>私以为,百度云对Windows下的浏览器在下载文件超过一定大小和数量会触发强制使用百度云客户端下载,再对客户端的下载限速.而百度云网页版对Mac Safari浏览器更友好,限制更低.<br>本教程原理推测是,通过使用插件模拟Safari浏览器获得百度云网页版的更高权限.  </p>
<h2 id="开始教程"><a href="#开始教程" class="headerlink" title="开始教程"></a>开始教程</h2><h3 id="1-下载并解压出User-Agent-Switcher插件"><a href="#1-下载并解压出User-Agent-Switcher插件" class="headerlink" title="1.下载并解压出User-Agent Switcher插件"></a>1.下载并解压出<code>User-Agent Switcher</code>插件</h3><p>插件下载地址: <a href="http://storage.live.com/items/AEE68C12565C1619!174699?authkey=AJoh90nl3u6Wj4U" target="_blank" rel="external">http://storage.live.com/items/AEE68C12565C1619!174699?authkey=AJoh90nl3u6Wj4U</a> </p>
<h3 id="2-打开浏览器扩展管理窗口"><a href="#2-打开浏览器扩展管理窗口" class="headerlink" title="2.打开浏览器扩展管理窗口"></a>2.打开浏览器<strong>扩展管理</strong>窗口</h3><p><img src="http://storage.live.com/items/AEE68C12565C1619!174707:/baiduyun_2.png?authkey=AJoh90nl3u6Wj4U" alt="baiduyunjiasu_2"></p>
<h3 id="3-将解压出的1-0-43-0-crx插件拖拽至浏览器扩展管理窗口中"><a href="#3-将解压出的1-0-43-0-crx插件拖拽至浏览器扩展管理窗口中" class="headerlink" title="3.将解压出的1.0.43_0.crx插件拖拽至浏览器扩展管理窗口中"></a>3.将解压出的<code>1.0.43_0.crx</code>插件拖拽至浏览器<strong>扩展管理</strong>窗口中</h3><p>拖拽后效果如图:<br><img src="http://storage.live.com/items/AEE68C12565C1619!174708:/baiduyun_3.png?authkey=AJoh90nl3u6Wj4U" alt="baiduyunjiasu_3"></p>
<h3 id="4-点选插件-将其设置为safari"><a href="#4-点选插件-将其设置为safari" class="headerlink" title="4.点选插件,将其设置为safari"></a>4.点选插件,将其设置为<strong>safari</strong></h3><p><img src="http://storage.live.com/items/AEE68C12565C1619!174709:/baiduyun_4.png?authkey=AJoh90nl3u6Wj4U" alt="baiduyunjiasu_4"></p>
<h3 id="5-打开网页版百度云-开始下载吧"><a href="#5-打开网页版百度云-开始下载吧" class="headerlink" title="5.打开网页版百度云,开始下载吧"></a>5.打开网页版百度云,开始下载吧</h3><h2 id="该方法优缺点总结"><a href="#该方法优缺点总结" class="headerlink" title="该方法优缺点总结"></a>该方法优缺点总结</h2><ul>
<li>优点<ol>
<li>安全: 不用安装什么绿色版破解版之流软件;</li>
<li>方便: 全程使用浏览器,甚至百度云网盘的客户端都不用安装哦;</li>
<li>高速: 默认情况下,客户端网速<code>10-30Kpbs</code>,此方法’1-3Mpbs’</li>
</ol>
</li>
<li>缺点<ul>
<li>无法批量下载10个以上文件(应该是百度对浏览器下载做出的限制)<ul>
<li>解决方法: 多次少量下载</li>
</ul>
</li>
<li>使用<code>User-Agent Switcher</code>插件后,无法正常打开一些网站,eg:<a href="http://www.bilibili.com/" target="_blank" rel="external">bilibili</a>  <ul>
<li>解决办法: 不进行下载时关闭该插件  </li>
</ul>
</li>
<li>并没有使用IDM的多断点下载速度快<ul>
<li>IDM真的好贵,能有效加速那么多够用啦,就这样啦</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>喏,就这样~🐱‍👤<br>如有疑问或指正,欢迎评论或给我发邮件哦.</p>
<!-- 参考链接 -->
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在之前的话&quot;&gt;&lt;a href=&quot;#写在之前的话&quot; class=&quot;headerlink&quot; title=&quot;写在之前的话&quot;&gt;&lt;/a&gt;写在之前的话&lt;/h2&gt;&lt;p&gt;呐,今年6月1日(也就是大后天)开始,&lt;a href=&quot;http://www.tmtpost.com/260
    
    </summary>
    
      <category term="教程" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="百度云" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/%E7%99%BE%E5%BA%A6%E4%BA%91/"/>
    
    
      <category term="教程" scheme="http://duruonanni.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法练习</title>
    <link href="http://duruonanni.com/Markdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/20170525.html"/>
    <id>http://duruonanni.com/Markdown语法练习/20170525.html</id>
    <published>2017-05-25T15:47:30.000Z</published>
    <updated>2017-05-26T09:03:59.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-语法练习"><a href="#Markdown-语法练习" class="headerlink" title="Markdown 语法练习"></a>Markdown 语法练习</h1><h2 id="写在之前的话"><a href="#写在之前的话" class="headerlink" title="写在之前的话"></a>写在之前的话</h2><p>本文主要是我在学习Markdown语法之后的总结记录.<br>本文只介绍Markdown的语法,不涉及任何HTML的知识.若觉得网上Markdown教程参杂着HTML等难以理解,相信本文能让大家高效掌握这门简单方便的’博客专用’标记语言.  </p>
<p>喏,开始吧.🐱‍👓</p>
<h2 id="1-Markdown简介"><a href="#1-Markdown简介" class="headerlink" title="1. Markdown简介"></a>1. Markdown简介</h2><p>Markdown是一种兼容HTML的轻量级纯文本标记语言,其作用是在写文章的同时对文字进行排版和布局.<br>常用于自媒体或Bloger撰写记录(如wordpress,ghost,jekyll,hexo都使用这种语言发布文章).<br>Markdown使用一些简单易懂的标记实现对文档的排版,同时也兼容<a href="http://www.markdown.cn/" title="Markdown语法说明" target="_blank" rel="external">HTML</a>的语法.<br>使用markdown语法写出文本的后缀名使<code>.md</code>.<br>本文主要参考了:<a href="http://www.markdown.cn/" title="Markdown语法说明" target="_blank" rel="external">易读易写:Markdown-语法说明</a>.</p>
<p>Markdown一大特点就是是可以兼容HTML的语法.下面在插入一段HTML的<strong>无序列表</strong>进行验证.<br><strong>Test</strong></p>
<ul><br>    <li> This is list 1<br>    </li><li> This is list 2<br></li></ul>

<p><strong>HTML代码</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">&lt;ul&gt;</span></div><div class="line">	<span class="symbol">&lt;li&gt;</span> This <span class="keyword">is</span> <span class="keyword">list</span> <span class="number">1</span></div><div class="line">	<span class="symbol">&lt;li&gt;</span> This <span class="keyword">is</span> <span class="keyword">list</span> <span class="number">2</span></div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<h2 id="2-Markdown编辑器推荐"><a href="#2-Markdown编辑器推荐" class="headerlink" title="2. Markdown编辑器推荐"></a>2. Markdown编辑器推荐</h2><p>对Markdown的初学者,建议使用的编辑器能满足以下要求:  </p>
<ol>
<li>Markdown<strong>语法高亮</strong>,可以在编辑的同时使用不同颜色表明语法的标记;</li>
<li>Markdown<strong>实时预览</strong>,可以在编辑同时预览编写出来格式的成品效果,即写即见;  </li>
<li>预览效果接近博客中呈现的效果;  </li>
</ol>
<p>在此,我推荐的学习用Markdown编辑器是:<br><strong><a href="https://www.zybuluo.com/mdeditor" title="CmdMarkdown" target="_blank" rel="external">CmdMarkdown在线编辑器</a></strong><br>目前,我使用的Markdown编辑器是<a href="https://notepad-plus-plus.org/" title="npp" target="_blank" rel="external">notepad++</a>,搭配一些插件.<br>使用notepad++的原因是:    </p>
<ol>
<li>简洁,我讨厌为了单独的markdown就去下载什么专用编辑器,也不喜欢在线编辑的方式;</li>
<li>习惯,notepad++是很棒的editor,最开始学习HTML我就使用它.它的交互逻辑和外观都让我喜欢;</li>
<li>notepad++可以通过添加markdown的xml语法规则轻松实现语法高亮;</li>
<li>notepad++可以引入<code>MarkdownViwer++</code>插件实现类似<code>CmdMarkdown</code>编辑器类似的双屏预览效果(但是有些语法的预览效果并不好,不过习惯了觉得不用预览也没毛病);  </li>
</ol>
<p>关于我对notepad++的调教,还是略有心得,就以后再单开一帖进行说明啦~😂</p>
<h2 id="3-Markdown常用语法"><a href="#3-Markdown常用语法" class="headerlink" title="3. Markdown常用语法"></a>3. Markdown常用语法</h2><h3 id="1-文本标题"><a href="#1-文本标题" class="headerlink" title="1). 文本标题"></a>1). <span id="title">文本标题</span></h3><p>通常使用atx形式的语法来标记文本标题,这是指:</p>
<blockquote>
<p>在行首插入 1 到 6 个 <strong>#</strong> ，对应到标题 1 到 6 阶.   </p>
</blockquote>
<p>eg:   </p>
<blockquote>
<h1 id="H1-这是1阶标题"><a href="#H1-这是1阶标题" class="headerlink" title="H1 这是1阶标题"></a>H1 这是1阶标题</h1><h2 id="H2-这是2阶标题"><a href="#H2-这是2阶标题" class="headerlink" title="H2 这是2阶标题"></a>H2 这是2阶标题</h2><h6 id="H6-这是6阶标题"><a href="#H6-这是6阶标题" class="headerlink" title="H6 这是6阶标题"></a>H6 这是6阶标题</h6></blockquote>
<p>markdown:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># H1 这是<span class="number">1</span>阶标题</div><div class="line">## H2 这是<span class="number">2</span>阶标题</div><div class="line">###### H6 这是<span class="number">6</span>阶标题</div></pre></td></tr></table></figure></p>
<p>att:</p>
<blockquote>
<ul>
<li><code>#</code>后面需要加一个空格</li>
<li>不同阶的标题对应的字体大小与间距不同</li>
<li>网页或阅读器可根据不同阶的标题而自动生成文章目录</li>
<li>不要使用标题语法来改变正文文字大小,会导致文章目录混乱</li>
<li>改变文字颜色和大小,建议使用HTML对应的语法</li>
<li>在<a href="http://www.w3school.com.cn/html/index.asp" title="HTML学习" target="_blank" rel="external">W3schlool</a>可以学到简单的HTML语法,这里就不介绍了哈</li>
</ul>
</blockquote>
<h3 id="2-文本的强调-粗体和斜体"><a href="#2-文本的强调-粗体和斜体" class="headerlink" title="2). 文本的强调(粗体和斜体)"></a>2). 文本的强调(粗体和斜体)</h3><p>Markdown 使用星号<code>*</code>和下划线<code>_</code>作为标记强调字词的符号.  </p>
<blockquote>
<p>被<strong>一</strong>对<code>*</code>或<code>_</code>包围的字词会被转成斜体;<br>被<strong>两</strong>对<code>*</code>或<code>_</code>包围的字词会被转成粗体;  </p>
</blockquote>
<p>eg:</p>
<blockquote>
<p>原文: 雾失楼台，月迷津度，桃源望断无寻处<br>斜体: <em>雾失楼台，月迷津度，桃源望断无寻处</em><br>粗体: <strong>雾失楼台，月迷津度，桃源望断无寻处</strong>  </p>
</blockquote>
<p>markdown:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">斜体: <span class="emphasis">*雾失楼台，月迷津度，桃源望断无寻处*</span></div><div class="line">粗体: <span class="strong">__雾失楼台，月迷津度，桃源望断无寻处__</span></div></pre></td></tr></table></figure></p>
<p>att:</p>
<blockquote>
<ul>
<li>使用星号<code>*</code>和下划线<code>_</code>都可以,但是什么符号开启标签，就要用什么符号结束</li>
<li>Markdown不具备<a href="http://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fromtitle=%E8%BD%AC%E4%B9%89%E7%AC%A6&amp;fromid=6151115" title="转义符" target="_blank" rel="external">转义符</a>,如果你的<code>*</code>和<code>_</code>两边都有空白的话，它们就只会被当成普通的符号.如 * 星号, _ 下划线.</li>
</ul>
</blockquote>
<h3 id="3-文本的换行"><a href="#3-文本的换行" class="headerlink" title="3). 文本的换行"></a>3). 文本的换行</h3><p>和我们常用的txt格式不同,markdown里面不能直接通过一个<code>enter</code>(回车键)换行.它常用的换行语法有两种:</p>
<blockquote>
<ol>
<li>在打算换行的文本后面添加一个空行,也就是连按两下<code>回车键</code>啦;</li>
<li>在打算换行的文本后面加入<strong>两个空格</strong>,再回车换行;  </li>
</ol>
</blockquote>
<p>att: </p>
<blockquote>
<ul>
<li>有些区块元素,如<a href="#title">标题</a>,区块引用,列表等.是单个回车即可换行的 </li>
</ul>
</blockquote>
<h3 id="4-文本的分割线"><a href="#4-文本的分割线" class="headerlink" title="4). 文本的分割线"></a>4). 文本的分割线</h3><p>使用<code>---</code>或<code>***</code>来生成水平分割线<br>eg:<br>《浣溪沙》欧阳修</p>
<hr>
<p>堤上游人逐画船,拍堤春水四垂天.绿杨楼外出秋千<br>白发戴花君莫笑,六么催拍盏频传.人生何处似尊前</p>
<hr>
<p>markdown:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">《浣溪沙》欧阳修</div><div class="line"><span class="emphasis">***</span></div><div class="line">堤上游人逐画船,拍堤春水四垂天.绿杨楼外出秋千  </div><div class="line">白发戴花君莫笑,六么催拍盏频传.人生何处似尊前  </div><div class="line"></div><div class="line"><span class="emphasis">***</span></div></pre></td></tr></table></figure></p>
<p>att:  </p>
<blockquote>
<ul>
<li><code>-</code>或者<code>*</code>连续超过3个就可被识别为分割线;</li>
<li>请务必保证使用分割线的该行中没有其他文本;</li>
<li>因为<code>---</code>还可以表示标题的Setext形式,为避免冲突,建议只使用<code>***</code>语法;</li>
<li>非要使用<code>---</code>,就必须要在它的前后都空一行;</li>
<li>当然,也可以使用HTML语法<code>&lt;br/&gt;</code>实现分割线;</li>
</ul>
</blockquote>
<h3 id="5-区块引用"><a href="#5-区块引用" class="headerlink" title="5). 区块引用"></a>5). <span id="blockquote">区块引用</span></h3><p>区块引用的效果是将文字(通常是说明,引用类文字)放在一个独立的框中,使文本排版更清晰.在不同的编辑器中,区块引用显示的效果略有不同.<br>区块引用的语法是在被引用文字之前添加<code>&gt;</code>符号.<br>eg:<br>这是一段普通文字</p>
<blockquote>
<p>这是一段被区块引用的文字</p>
<blockquote>
<p>区块引用支持多层嵌套,可用<code>&gt;&gt;</code>或更多个<code>&gt;</code>表示  </p>
</blockquote>
</blockquote>
<p>att:</p>
<blockquote>
<p>为避免冲突,在使用<code>&gt;</code>引用后,需添加一个空格再写正文<br>若两块引用之间未添加其他有效元素,这两块引用会默认被放在一个框里<br>跳出引用框的方式是<strong>换行</strong><br>引用中可正常使用markwodn的其他语法  </p>
</blockquote>
<h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6). 列表"></a>6). 列表</h3><p>Markdown 支持有序列表和无序列表.<br>无序列表使用<code>*</code>,<code>+</code>,<code>-</code>标记;<br>有序列表使用数字连英语句号.<br>eg:<br><strong>无序列表</strong></p>
<blockquote>
<ul>
<li>red<ul>
<li>purple</li>
<li>pink</li>
</ul>
</li>
</ul>
<ul>
<li>green</li>
</ul>
<ul>
<li>blue    </li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>有序列表</strong></p>
<ol>
<li>seal</li>
<li>whale</li>
<li>penguin  </li>
</ol>
</blockquote>
<p>markdown:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">**无序列表**</div><div class="line"><span class="meta">&gt;</span><span class="bash"> * red</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">	* purple</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">	* pink</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> - green</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> + blue  </span></div><div class="line"><span class="meta"></span></div><div class="line">&gt;<span class="bash"> **有序列表**</span></div><div class="line">1. seal</div><div class="line">2. whale</div><div class="line">3. penguin</div></pre></td></tr></table></figure></p>
<p>att:</p>
<blockquote>
<ul>
<li>千万记得空格</li>
<li>列表支持多层级嵌套(如上面的无序列表那样),在需要多级嵌套的列表前插入<code>tab</code>(制表键)</li>
</ul>
</blockquote>
<h3 id="7-代码块"><a href="#7-代码块" class="headerlink" title="7). 代码块"></a>7). 代码块</h3><p>代码块实现的效果是将块中的文本以深色方框圈示出来.<br>代码块通常用于标记特定语法元素或成段的代码内容,也可以用来标记任何需要在文本中被突出强调的内容.<br>使用一个一对    <strong> ` </strong>     符号框选行内代码块;<br>使用连续三个一对    <strong> ` </strong>     符号框选多行代码块;<br>eg:  </p>
<blockquote>
<p>行内代码块演示:<br> <code>&lt;code&gt;</code>,<code>&lt;script&gt;</code>,<code>console</code>,<code>printf</code>  </p>
<hr>
<p>多行代码块演示,如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Markdown basic learning from Duruonanni<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Duruo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>att:</p>
<blockquote>
<ul>
<li><strong> ` </strong>这个符号在键盘上排数字1的左边,注意和<strong> ‘ </strong>(小引号)的区分;</li>
<li><strong>多行代码块</strong>和<strong><a href="#blockquote">区块引用</a></strong>的区别:<blockquote>
<ul>
<li>多行代码块引用的文本会直接显示其符号代码本身,引用中标示的题目,加粗等等排版都不会有效显示出来;</li>
<li>区块引用的文本,其中的标记代码以其产生的效果呈现;</li>
<li>在多数编辑器中,使用多行代码块产生的区块默认会在其开头自动添加行号;</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="8-超链接"><a href="#8-超链接" class="headerlink" title="8). 超链接"></a>8). 超链接</h3><p>Markdown 中输入的网址能<strong>自动转换成可点击的形式</strong>.此外,Markdown 还 支持两种形式的链接语法： <strong>行内式</strong>和<strong>参考式</strong>两种形式.<br>两种方法中,链接文字都使用<strong>[方括号]</strong>来标记.  </p>
<h4 id="行内式超链接语法举例"><a href="#行内式超链接语法举例" class="headerlink" title="行内式超链接语法举例:"></a><strong>行内式</strong>超链接语法举例:</h4><p><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.</code><br>效果如下:<br>This is <a href="http://duruonanni.github.io" title="Title" target="_blank" rel="external">an example</a> inline link.</p>
<h4 id="行内式超链接语法详解"><a href="#行内式超链接语法详解" class="headerlink" title="行内式超链接语法详解:"></a><strong>行内式</strong>超链接语法详解:</h4><ul>
<li>[]中括号中的内容为超链接文字</li>
<li>()小括号前部分为超链接地址</li>
<li>()小括号后部分为对链接的说明,可省略,前后部分用空格区分  </li>
<li>链接说明必须用双引号或单引号或括号包围起来(就统一用双引号吧)</li>
</ul>
<hr>
<h4 id="参考试超链接语法举例"><a href="#参考试超链接语法举例" class="headerlink" title="参考试超链接语法举例:"></a><strong>参考试</strong>超链接语法举例:</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [<span class="string">Bing</span>][<span class="symbol">1</span>] than from</div><div class="line">[<span class="string">Yahoo</span>][<span class="symbol">2</span>] or [<span class="string">apple</span>][<span class="symbol">3</span>].</div><div class="line"></div><div class="line"><span class="code">	[1]: http://www.bing.com       "Bing"</span></div><div class="line"><span class="code">	[2]: http://search.yahoo.com/  "Yahoo Search"</span></div><div class="line"><span class="code">	[3]: http://apple.com 	"apple"</span></div></pre></td></tr></table></figure>
<p>效果如下:<br>I get 10 times more traffic from <a href="http://www.markdown.cn/" title="Markdown语法说明" target="_blank" rel="external">Bing</a> than from<a href="https://zh.wikipedia.org/wiki/HTML" title="HTML" target="_blank" rel="external">Yahoo</a> or <a href="http://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fromtitle=%E8%BD%AC%E4%B9%89%E7%AC%A6&amp;fromid=6151115" title="转义符" target="_blank" rel="external">Apple</a>.  </p>
<h4 id="参考试超链接语法详解"><a href="#参考试超链接语法详解" class="headerlink" title="参考试超链接语法详解:"></a><strong>参考试</strong>超链接语法详解:</h4><ul>
<li>在正文中,前面一个[]中括号放超链接文字</li>
<li>后面一个[]中括号中放这个超链接文字对应的编号</li>
<li>后面的说明不会出现在正文中,其以编号对应超链接指向的地址</li>
<li>使用参考试的超链接可重复定义,只要标号相同即可</li>
<li>链接的说明内容可以集中放在文章末尾,像论文的参考文献那样</li>
<li>建议多使用<strong>参考试</strong>超链接</li>
</ul>
<h3 id="9-图片"><a href="#9-图片" class="headerlink" title="9). 图片"></a>9). 图片</h3><p>Markdown支持通过超链接插入图片,具体的语法如下:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">douwei_shanheshui</span>](<span class="link">http://storage.live.com/items/AEE68C12565C1619!174692:/douwei_shanheshui.jpg?authkey=AJoh90nl3u6Wj4U "山河水.窦唯"</span>)</div></pre></td></tr></table></figure></p>
<h4 id="插入图片语法说明"><a href="#插入图片语法说明" class="headerlink" title="插入图片语法说明:"></a>插入图片语法说明:</h4><ul>
<li>首先一个叹号!</li>
<li>接着一个[]方括号,在其中键入图片的替代文字(就是图片失效时显示的替代文字)</li>
<li>最后跟()小括号,前半部分是引用图片的地址</li>
<li>()小括号中,后半部分引号包起来的是对图片的说明,可省略  </li>
</ul>
<h4 id="以上插入图片举例的效果如下"><a href="#以上插入图片举例的效果如下" class="headerlink" title="以上插入图片举例的效果如下:"></a>以上插入图片举例的效果如下:</h4><p><img src="http://storage.live.com/items/AEE68C12565C1619!174692:/douwei_shanheshui.jpg?authkey=AJoh90nl3u6Wj4U" alt="douwei_shanheshui">  </p>
<h4 id="att"><a href="#att" class="headerlink" title="att:"></a>att:</h4><ul>
<li>此法插入的图片,无法调整位置和大小,若需要调整,请自行学习HTML对应语法</li>
<li>此法插入图片的路径,可以是一个url地址,可以是文本所在文件夹的相对位置</li>
<li>若使用markdown写的带图文章需要发布在网上,建议将使用<a href="http://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A" title="图床介绍" target="_blank" rel="external">图床</a>生成图片链接</li>
<li>本文使用<strong>Onedrive</strong>做图床</li>
</ul>
<h3 id="9-非常用标记"><a href="#9-非常用标记" class="headerlink" title="9). 非常用标记"></a>9). 非常用标记</h3><p>下面简单介绍几个Markdown中我认为的不重要的非常用标记:  </p>
<h4 id="9-1-表格"><a href="#9-1-表格" class="headerlink" title="9.1 表格"></a>9.1 表格</h4><p>是的,Markdown可以用来生成简单的表格,其生成的表格效果如下:  </p>
<table>
<thead>
<tr>
<th>浓香型</th>
<th style="text-align:center">酱香型</th>
<th style="text-align:right">清香型</th>
<th style="text-align:center">米香型</th>
</tr>
</thead>
<tbody>
<tr>
<td>五粮液</td>
<td style="text-align:center">茅 台</td>
<td style="text-align:right">汾 酒</td>
<td style="text-align:center">三花酒</td>
</tr>
<tr>
<td>泸州老窖</td>
<td style="text-align:center">郎 酒</td>
<td style="text-align:right">二锅头</td>
<td style="text-align:center">冰峪庄园</td>
</tr>
<tr>
<td>首行是</td>
<td style="text-align:center">表格标题</td>
<td style="text-align:right">注意观察</td>
<td style="text-align:center">对齐方向</td>
</tr>
</tbody>
</table>
<p>对应的语法如下:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> 浓香型 </span>|<span class="string"> 酱香型 </span>|<span class="string"> 清香型 </span>|<span class="string"> 米香型 </span>|</div><div class="line">|<span class="string"> ------ </span>|<span class="string"> :----: </span>|<span class="string"> -----: </span>|<span class="string"> :----: </span>|</div><div class="line">|<span class="string"> 五粮液 </span>|<span class="string"> 茅 台  </span>|<span class="string"> 汾 酒  </span>|<span class="string"> 三花酒 </span>|</div><div class="line">|<span class="string"> 泸州老窖 </span>|<span class="string"> 郎 酒 </span>|<span class="string"> 二锅头 </span>|<span class="string"> 冰峪庄园 </span>|</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>使用<code>|</code>对表格进行划分,表格与内容之间用<strong>空格</strong>隔开</li>
<li><code>------:</code>为右对齐;<code>:-----</code>为左对齐;<code>:----:</code>为居中对齐</li>
<li>默认使用居中对齐,对齐方式对该列有效</li>
<li>写在对齐方式上排的是标题,默认会加粗</li>
<li>在不同编辑器中对这种表格的兼容性不同</li>
<li>这种制表的方法其实比较简陋,所以不建议使用这种制表方式</li>
<li>制表格,建议使用HTML对应的语法  </li>
</ul>
<h4 id="9-2-Todolist-待办事项"><a href="#9-2-Todolist-待办事项" class="headerlink" title="9.2 Todolist(待办事项)"></a>9.2 Todolist(待办事项)</h4><p>是的,Markdown可以生成Todolist,其生成的效果如下:  </p>
<ul>
<li>[ ] Markdown-语法说明<ul>
<li>[x] Markdown简介</li>
<li>[x] Markdown常用语法说明</li>
<li>[ ] Markdown 编辑器</li>
</ul>
</li>
<li>[ ] 纯<code>Javascript</code>编写<code>1024</code>小游戏  </li>
</ul>
<p>对应语法如下:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> [ ] Markdown-语法说明</span></div><div class="line">	-<span class="ruby"> [x] Markdown简介</span></div><div class="line">	-<span class="ruby"> [x] Markdown常用语法说明</span></div><div class="line">	-<span class="ruby"> [ ] Markdown 编辑器</span></div><div class="line">-<span class="ruby"> [ ] 纯<span class="string">`Javascript`</span>编写<span class="string">`1024`</span>小游戏</span></div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>看例子应该很好理解,就不长谈了.就这样啦~</li>
</ul>
<h4 id="9-3-更不常用的标记"><a href="#9-3-更不常用的标记" class="headerlink" title="9.3 更不常用的标记"></a>9.3 更不常用的标记</h4><p>此外,Markdown还可以制作,流程图,序列图,甘特图等等等.<br>但是这些并不常用,在此就暂且略过啦~</p>
<h2 id="3-学完Markdown后做什么"><a href="#3-学完Markdown后做什么" class="headerlink" title="3. 学完Markdown后做什么"></a>3. 学完<strong>Markdown</strong>后做什么</h2><p>学完Markdown,当然就可以愉快的在博客中畅所欲言啦.<br>当然,若要实现文章更漂亮的排版(eg:文字的<font color="pink" size="5em">颜色大小</font>啦,图片的大小位置调整啊,文本背景设置啊,等等等).<br>你就需要继续学习<a href="https://zh.wikipedia.org/wiki/HTML" title="HTML" target="_blank" rel="external">HTML</a>和<a href="http://baike.baidu.com/item/CSS/5457?fromtitle=%E7%BA%A7%E8%81%94%E6%A0%B7%E5%BC%8F%E8%A1%A8&amp;fromid=4312047" title="CSS介绍" target="_blank" rel="external">CSS</a>了.<br>此外,要实现一些诸如<strong>自动插入文章字数,写文章时间等</strong>,你还需要学一些基础的<a href="http://baike.baidu.com/item/javascript" title="javascript" target="_blank" rel="external">JavaScript</a>脚本.<br>路漫漫其修远兮,照着这个既定的路径,就会在技术求索的路上停不下来了.  </p>
<p>喏,就这样吧~🐱‍👤</p>
<!-- 参考文献 -->
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown-语法练习&quot;&gt;&lt;a href=&quot;#Markdown-语法练习&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法练习&quot;&gt;&lt;/a&gt;Markdown 语法练习&lt;/h1&gt;&lt;h2 id=&quot;写在之前的话&quot;&gt;&lt;a href=&quot;#写在之
    
    </summary>
    
      <category term="教程" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="markdown" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/markdown/"/>
    
    
      <category term="教程" scheme="http://duruonanni.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo建站流程</title>
    <link href="http://duruonanni.com/%E5%BB%BA%E7%AB%99%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/20170509.html"/>
    <id>http://duruonanni.com/建站流程记录/20170509.html</id>
    <published>2017-05-08T16:20:40.797Z</published>
    <updated>2017-05-26T09:03:52.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在之前的话"><a href="#写在之前的话" class="headerlink" title="写在之前的话"></a>写在之前的话</h2><p>本文是笔者在搭建本站时收集记录的建站过程.在搭建过程中,由于相关知识的匮缺,看不懂一些教程中省略的部分或是一些专业术语,走了一些弯路.但磕绊终究是成功建好了本站.也有了此小文.<br><strong>本文适用于对Hexo建站感兴趣但畏惧专业术语的非科班出身同学.我其中对一些网上多数教程稍省略不清楚的地方进行了解释.</strong> 希望能帮助到需要的人.<br><em>由于笔者也只是前端和建站的初学者,多有不足之处,还望批评指正.</em>  </p>
<h3 id="本文主要参考了"><a href="#本文主要参考了" class="headerlink" title="本文主要参考了:"></a>本文主要参考了:</h3><blockquote>
<ul>
<li>Setsuna’s Blog : <a href="http://www.isetsuna.com/hexo/introduction/" title="Hexo博客系列" target="_blank" rel="external">Hexo博客系列</a></li>
<li>up主:SnowHotarubi的视频教程 : <a href="http://www.bilibili.com/video/av9185310" title="搭载个人网站竟如此简单" target="_blank" rel="external">搭载个人网站竟如此简单系列</a></li>
<li><a href="https://hexo.io" title="hexo官方文档" target="_blank" rel="external">hexo官方文档</a>  </li>
</ul>
</blockquote>
<h3 id="我使用的软件版本"><a href="#我使用的软件版本" class="headerlink" title="我使用的软件版本:"></a>我使用的软件版本:</h3><table>
<thead>
<tr>
<th style="text-align:center">softwares</th>
<th style="text-align:center">edition</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">OS</td>
<td style="text-align:center">Windows 10-x64 10563 创意者更新正式版</td>
</tr>
<tr>
<td style="text-align:center">Node.js</td>
<td style="text-align:center">v6.10.2-x64</td>
</tr>
<tr>
<td style="text-align:center">git</td>
<td style="text-align:center">2.12.2.2-x64</td>
</tr>
<tr>
<td style="text-align:center">hexo</td>
<td style="text-align:center">3.3.5</td>
</tr>
</tbody>
</table>
<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h2><h3 id="1-下载并安装-Node-js"><a href="#1-下载并安装-Node-js" class="headerlink" title="1) 下载并安装 Node.js"></a>1) 下载并安装 <a href="https://nodejs.org/en/" title="Node.js" target="_blank" rel="external">Node.js</a></h3><h3 id="2-下载并安装git"><a href="#2-下载并安装git" class="headerlink" title="2) 下载并安装git"></a>2) 下载并安装<a href="https://git-scm.com" title="git" target="_blank" rel="external">git</a></h3><p>说明: </p>
<blockquote>
<ul>
<li>以上<code>Node.js</code>是Hexo需要的运行环境;<code>git</code>用于网站的发布与托管.</li>
<li>以上两个软件,下载后全部按照默认要求安装即可.  </li>
</ul>
</blockquote>
<p>ATT: </p>
<blockquote>
<ul>
<li>若git安装完成后在<strong>文件管理器</strong>中右键无<code>Git bash here</code>选项,参考此教程:<em><a href="http://blog.csdn.net/u014527912/article/details/51723735" title="右键添加gitbash" target="_blank" rel="external">右键-添加Git Bash Here菜单</a></em>  </li>
</ul>
</blockquote>
<h2 id="二-Hexo的安装和blog文件夹的初始化"><a href="#二-Hexo的安装和blog文件夹的初始化" class="headerlink" title="二. Hexo的安装和blog文件夹的初始化"></a>二. Hexo的安装和blog文件夹的初始化</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1) 安装hexo"></a>1) 安装hexo</h3><p>方法: </p>
<blockquote>
<ul>
<li>打开新安装的<code>git bash</code>软件,在其中输入    <code>npm install hexo-cli -g</code>,<strong>回车确认</strong>  </li>
</ul>
</blockquote>
<p>ATT:</p>
<blockquote>
<ul>
<li>在<code>git bash</code>中输入的所有代码都要以<strong>回车确认</strong>才有效;</li>
<li>可为避免输入错误,可直接复制此代码,在<code>git bash</code>中以<strong>shift+insert</strong>组合键粘贴;</li>
<li>检查是否安装成功,可输入 <code>Hexo version</code>(显示Hexo版本则安装成功);</li>
<li>遇到提示<code>Local hexo not found in ~</code>问题,继续输入:<code>npm install hexo --save</code>;</li>
</ul>
</blockquote>
<h3 id="2-新建blog文件夹"><a href="#2-新建blog文件夹" class="headerlink" title="2) 新建blog文件夹"></a>2) 新建<code>blog</code>文件夹</h3><p>方法:  </p>
<blockquote>
<p>电脑适当位置新建一个blog文件夹(也可以命名为其他,本文全使用blog代指此文件夹),用于存放Hexo博客相关文件;  </p>
</blockquote>
<h3 id="3-在git-bash中选定blog文件夹"><a href="#3-在git-bash中选定blog文件夹" class="headerlink" title="3) 在git bash中选定blog文件夹"></a>3) 在<code>git bash</code>中选定<code>blog</code>文件夹</h3><blockquote>
<ul>
<li>选定方法一: 在该文件管理器中的该文件夹内鼠标右键点击<strong>Git Bash Here</strong></li>
<li>选定方法二: 在git bash中输入文件夹的绝对路径,eg:<code>cd c:/cusumerfiles/blog</code>( cd [blog文件夹位置] )  </li>
</ul>
</blockquote>
<h3 id="4-初始化blog文件夹"><a href="#4-初始化blog文件夹" class="headerlink" title="4) 初始化blog文件夹"></a>4) 初始化<code>blog</code>文件夹</h3><p>方法:    </p>
<blockquote>
<ul>
<li>在<code>git bash</code>中输入: <code>hexo init</code>  </li>
</ul>
</blockquote>
<p>ATT: </p>
<blockquote>
<ul>
<li>初始化完成后,文件夹内会多出一些文件  </li>
</ul>
</blockquote>
<h3 id="5-安装npm"><a href="#5-安装npm" class="headerlink" title="5) 安装npm"></a>5) 安装npm</h3><p>方法:    </p>
<blockquote>
<ul>
<li>在<code>git bash</code>中输入: <code>npm install</code>    </li>
</ul>
</blockquote>
<p>至此,Hexo安装完成  </p>
<h3 id="6-在本地预览博客效果"><a href="#6-在本地预览博客效果" class="headerlink" title="6) 在本地预览博客效果"></a>6) 在本地预览博客效果</h3><p>方法:    </p>
<blockquote>
<ul>
<li>在<code>git bash</code>中输入: <code>hexo server</code></li>
<li>在浏览器中打开 <strong> <a href="http://loacalhost:4000" target="_blank" rel="external">http://loacalhost:4000</a> </strong> 即可预览默认博客页面</li>
<li>在git Bash中输入<strong>ctrl+c</strong>退出预览</li>
</ul>
</blockquote>
<h2 id="三-Hexo的基本配置"><a href="#三-Hexo的基本配置" class="headerlink" title="三. Hexo的基本配置"></a>三. Hexo的基本配置</h2><p>此配置涉及到<strong>网址</strong>,<strong>网站名称</strong>,<strong>拥有者</strong>,<strong>文章发布形式</strong>等信息.<br>方法:  </p>
<blockquote>
<ul>
<li>在Blog根目录下,找到<code>_config.yml</code>文件.使用文本编辑器打开(推荐使用<a href="https://notepad-plus-plus.org" title="notepad++" target="_blank" rel="external">notepad++</a>或者<a href="http://www.sublimetext.com/" title="sublime" target="_blank" rel="external">sublime Text 3</a>软件)进行设置</li>
<li>配置的具体方法见本站:<a href="https://duruonanni.github.io/blog/Hexo站点设置/20170508/" title="Hexo站点设置" target="_blank" rel="external">Hexo站点设置</a></li>
</ul>
</blockquote>
<h2 id="四-Hexo主题设置"><a href="#四-Hexo主题设置" class="headerlink" title="四.    Hexo主题设置"></a>四.    Hexo主题设置</h2><p>Hexo的特点就是拥有许多或清新或绚丽的主题(自带的主题名称叫<code>landscape</code>),选择一款中意的主题,进行一些简单的设置,就能让博客更加赏心悦目.以下是主题设置的方法,本文以<code>NexT</code>主题为例设置:  </p>
<h3 id="1-进入Hexo官方主题商店预览-选定喜欢的主题"><a href="#1-进入Hexo官方主题商店预览-选定喜欢的主题" class="headerlink" title="1) 进入Hexo官方主题商店预览,选定喜欢的主题"></a>1) 进入<a href="https://hexo.io/themes/" title="Hexo官方主题商店" target="_blank" rel="external">Hexo官方主题商店</a>预览,选定喜欢的主题</h3><blockquote>
<ul>
<li>以NexT主题为例 主题详情页: <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></li>
<li>主题样式预览页: <a href="http://notes.iissnan.com/" target="_blank" rel="external">http://notes.iissnan.com/</a>  </li>
</ul>
</blockquote>
<h3 id="2-NexT主题安装"><a href="#2-NexT主题安装" class="headerlink" title="2) NexT主题安装"></a>2) NexT主题安装</h3><blockquote>
<ul>
<li>在将<code>git bash</code>定位到blog文件夹,键入:<br>  <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>.<br>  成功则将会在blog-&gt;themes文件夹下新建next文件夹  </li>
<li>ATT: 务必保存一个next文件夹内的 <code>_config.yml</code>文件备份.  </li>
</ul>
</blockquote>
<h3 id="3-NexT主题启用"><a href="#3-NexT主题启用" class="headerlink" title="3) NexT主题启用"></a>3) NexT主题启用</h3><blockquote>
<ul>
<li><p>使用文本编辑器打开<code>blog</code>下的<code>config.yml</code>,找到<code>theme</code>字段,将原始值<code>landscape</code>用<code>#</code>注释掉(方便今后需要时候找回),新建主题<code>theme: next</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 主题</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></div><div class="line"><span class="meta">#</span><span class="bash">theme: <span class="literal">false</span> <span class="comment">#禁用主题</span></span></div><div class="line"><span class="meta">#</span><span class="bash">theme: landscape <span class="comment">#默认主题</span></span></div><div class="line">theme: next</div></pre></td></tr></table></figure>
</li>
<li><p>ATT: 在切换主题之后,验证之前,最好使用<code>hexo clean</code> 来清除Hexo的缓存  </p>
</li>
</ul>
</blockquote>
<h3 id="4-调试新主题"><a href="#4-调试新主题" class="headerlink" title="4) 调试新主题"></a>4) 调试新主题</h3><blockquote>
<ul>
<li>使用Hexo的本地调试模式验证新主题效果,在<code>git bash</code>中输入:<code>hexo server --debug</code></li>
<li>在浏览器打开: <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 验证主题是否正常使用  </li>
<li>调试完成后,在<code>git bash</code>中键入<code>ctrl+c</code>快捷键组合取消调试</li>
</ul>
</blockquote>
<h3 id="5-主题详细设置"><a href="#5-主题详细设置" class="headerlink" title="5) 主题详细设置"></a>5) 主题详细设置</h3><blockquote>
<ul>
<li>详见<a href="http://theme-next.iissnan.com/getting-started.html" title="NexT主题文档" target="_blank" rel="external">Next主题的官方文档</a>  </li>
<li><p>之后我也会写一个自己站点的主题设置方案,暂时todo list 吧~  </p>
</li>
<li><p>ATT:在设置主题时,可打开了Hexo本地调试模式(<code>hexo server</code>),在设定主题效果后,即刻保存相应的<strong>config.yml</strong>文件并刷新浏览器,可在浏览器即刻上预览更改的效果.取消调试在在<code>git bash</code>中键入<code>ctrl+c</code>快捷键  </p>
</li>
</ul>
</blockquote>
<h2 id="五-Hexo插件设置"><a href="#五-Hexo插件设置" class="headerlink" title="五. Hexo插件设置"></a>五. Hexo插件设置</h2><p>通过插件可为站点添加: <strong>显示运行时间</strong>,<strong>日历</strong>,<strong>添加RSS</strong>,<strong>添加友链</strong>等功能.  </p>
<blockquote>
<ul>
<li>hexo插件位于: blog/node_modules 目录下</li>
<li>官方插件详情地址是: <a href="http://hexo.io/plugins/" target="_blank" rel="external">http://hexo.io/plugins/</a>  </li>
</ul>
</blockquote>
<h2 id="六-将网站托管到Github-pages"><a href="#六-将网站托管到Github-pages" class="headerlink" title="六. 将网站托管到Github pages"></a>六. 将网站托管到Github pages</h2><p><a href="https://github.com" title="github" target="_blank" rel="external">Github</a>是全球最大的开源程序托管平台,有无数极具创造力和分享精神的<code>Programmers</code> &amp; <code>Engineers</code>在上面创造改变世界的代码.<!--是为数不多的,即便是我国环境下也能顺畅访问的大网站.--><br><a href="https://pages.github.com" title="github pages" target="_blank" rel="external">GitHub pages</a>是<code>github</code>上一个项目,他允许用户实时展示自己的网站与正在进行的项目.<br>我们就将使用<code>GitHub pages</code>对我们本地创建好的<code>Hexo</code>博客网站进行托管和发布.<br>操作完成后,任何人就都可以通过域名在互联网上访问你的网站了.<br>ATT:</p>
<blockquote>
<ul>
<li><code>Github pages</code>是免费的,因此有一些限制,但创建流量不高的个人网站完全够用.具体限制是:<br>  单个仓库大小不超过1GB，上传单个文件大小不能超过100MB，通过浏览器上传不能超过25MB个人网站项目也不例外，最大空间1GB个人网站项目每个月访问请求数不能超过10万次，总流量不能超过100GB个人网站项目一小时创建数量不能超过10个.</li>
<li>可在此网站查看<code>Github pages</code>的使用政策:<br>   <a href="https://help.github.com/articles/what-is-github-pages/#recommended-limits" target="_blank" rel="external">https://help.github.com/articles/what-is-github-pages/#recommended-limits</a></li>
</ul>
</blockquote>
<h3 id="1-注册github账号"><a href="#1-注册github账号" class="headerlink" title="1) 注册github账号"></a>1) 注册github账号</h3><blockquote>
<p>直接进入<a href="https://github.com" title="github" target="_blank" rel="external">Github</a>官网,使用邮箱注册账号即可.  </p>
<p>ATT: 慎重填写<code>Github账号名</code>,这会是你的网站域名.  </p>
</blockquote>
<h3 id="2-配置SSH-keys-建立本地与github的联系"><a href="#2-配置SSH-keys-建立本地与github的联系" class="headerlink" title="2) 配置SSH keys(建立本地与github的联系)"></a><span id="2">2)</span> 配置SSH keys(建立本地与github的联系)</h3><h4 id="①-检查SSH-keys设置"><a href="#①-检查SSH-keys设置" class="headerlink" title="① 检查SSH keys设置"></a>① 检查SSH keys设置</h4><blockquote>
<p>ps: <strong>以下所有的输入均指在<code>git bash</code>中输入</strong>,输入完成请记得<strong>回车</strong>  </p>
<p>在<code>git bash</code>输入:<em>cd ~/.ssh</em>  </p>
</blockquote>
<h4 id="②-生成SSH-key-输入-ssh-keygen-t-rsa-C-“邮件地址-youremail-com”"><a href="#②-生成SSH-key-输入-ssh-keygen-t-rsa-C-“邮件地址-youremail-com”" class="headerlink" title="② 生成SSH key 输入: ssh-keygen -t rsa -C “邮件地址@youremail.com”"></a>② 生成SSH key 输入: ssh-keygen -t rsa -C “邮件地址@youremail.com”</h4><blockquote>
<p>ATT:<br>注意此处区分大小写,那个<code>C</code>是大写  </p>
<p>首次连接会出现key fingerprint警告,输入yes继续<br><code>Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa)</code><br>此处意思是选择密匙存放位置,默认即可,回车继续<br><code>Enter passphrase (empty for no passphrase)</code><br>公匙密码,不需要密码则直接回车</p>
<ul>
<li>若输入了密码,在此处以及确认密码输入时都不会显示明文密码(应该是保护隐私的缘故),继续输入即可.  </li>
<li>请牢记此密码,这是每次发布博客都需要用到的.  </li>
</ul>
<p><code>Enter same passphrase again</code><br>重复确认密码,不需要则直接回车<br><code>Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.</code><br>私钥保存路径,回车<br><code>Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</code><br>公钥保存路径,回车<br>出现 <code>The key fingerprint is:&amp; The key&#39;s randomart image is</code> 说明配置成功<br>出现 <code>You&#39;ve successfully authenticated</code> 则自此配置成功.  </p>
</blockquote>
<h3 id="3-在Github创建-GitHub-Pages-项目"><a href="#3-在Github创建-GitHub-Pages-项目" class="headerlink" title="3) 在Github创建 GitHub Pages 项目"></a>3) 在Github创建 <code>GitHub Pages</code> 项目</h3><h4 id="①-新建仓库"><a href="#①-新建仓库" class="headerlink" title="① 新建仓库"></a>① 新建仓库</h4><blockquote>
<p>方法: 打开浏览器上建好的<code>github</code>账号主页 击右上角+号选择 <code>new reponsitory</code> .(新建仓库)<br><strong>ATT</strong>: 仓库名称<strong>只能</strong>是<code>username.github.io</code>(username为你创建账号的名字,必须完全一致)  </p>
</blockquote>
<h4 id="②-向github添加SSH公匙"><a href="#②-向github添加SSH公匙" class="headerlink" title="② 向github添加SSH公匙"></a>② 向github添加SSH公匙</h4><blockquote>
<p>方法:</p>
<ol>
<li>找到<a href="#2"><strong>2)</strong></a>中配置公匙的路径(参见本文中的默认路径即可),用文本编辑器打开并复制 <code>id_rsa.pub</code>文件中的所有内容.  </li>
<li>打开浏览器中的Github个人主页,依次点击:<code>Settings</code>—&gt;<code>SSH keys</code>—&gt;<code>Add SSH key</code>  </li>
<li>在Title文本框中输入任意字符,在key文本框中粘贴刚才复制的公匙,保存.自此,操作完成.  </li>
</ol>
</blockquote>
<h4 id="③-测试链接"><a href="#③-测试链接" class="headerlink" title="③ 测试链接"></a>③ 测试链接</h4><blockquote>
<p>在git bash中输入: <code>ssh -T git@github.com</code><br>首次连接会出现密钥指纹警告，输入<code>yes</code>回车即可<br>显示 <code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则操作成功  </p>
</blockquote>
<h3 id="4-在Github中创建项目"><a href="#4-在Github中创建项目" class="headerlink" title="4) 在Github中创建项目"></a>4) 在<code>Github</code>中创建项目</h3><h4 id="①-向Hexo安装插件-hexo-deployer-git"><a href="#①-向Hexo安装插件-hexo-deployer-git" class="headerlink" title="① 向Hexo安装插件 hexo-deployer-git"></a>① 向Hexo安装插件 <code>hexo-deployer-git</code></h4><blockquote>
<p>说明: 此插件用于向GitHub部署静态页面<br>方法: 输入: <code>npm install hexo-deployer-git --save</code>  </p>
</blockquote>
<h4 id="②-修改-config-yml文件"><a href="#②-修改-config-yml文件" class="headerlink" title="② 修改_config.yml文件"></a>② 修改<code>_config.yml</code>文件</h4><blockquote>
<p>用文本编辑器打开blog文件夹中的 config.yml文件,下拉至最后找到deploy栏,进行如下修改:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:  </div><div class="line">   <span class="attribute">type</span>: git (部署类型若有问题，其他类型自行google之)  </div><div class="line">   <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/yourname/yourname.github.io.git  </span></div><div class="line">   (yourname改成你的项目名,注意两个名字必须一致)  </div><div class="line">   <span class="attribute">branch</span>: master</div><div class="line">   <span class="attribute">plugins</span>: -hexo-generator-feed</div></pre></td></tr></table></figure></p>
<p>改完成后保存  </p>
</blockquote>
<h4 id="③-部署网页"><a href="#③-部署网页" class="headerlink" title="③ 部署网页"></a>③ 部署网页</h4><blockquote>
<p>在 git bash 中输入: <code>hexo generate</code>    回车(生成静态网页)<br>在 git bash 继续输: <code>hexo deploy</code>    回车(开始部署网站)  </p>
</blockquote>
<h4 id="④-通过浏览器确定是否部署成功"><a href="#④-通过浏览器确定是否部署成功" class="headerlink" title="④ 通过浏览器确定是否部署成功"></a>④ 通过浏览器确定是否部署成功</h4><blockquote>
<p>在浏览器地址栏输入: <a href="http://yourname.github.io" target="_blank" rel="external">http://yourname.github.io</a>    (yourname为你的项目名)<br>显示hexo默认界面则成功</p>
</blockquote>
<h2 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h2><p>教程有对如何建站进行了讲解.建站的完成,自然意味着博客冒险之路的开始咯.诚然,建站完成之后还有很多工作需要做呢.<br>本文的站点建设,几乎不涉及任何知识点,只是依葫芦画瓢的简单操作.<br>之后,我觉得我们应该至少掌握如下技能:</p>
<ul>
<li>[x] <a href="https://duruonanni.github.io/blog/Hexo%E7%AB%99%E7%82%B9%E8%AE%BE%E7%BD%AE/20170508/" title="hexo站点设置" target="_blank" rel="external">Hexo站点设置</a>,更详细的掌握这个站点的各个功能,让自己的操作更得心应手;  </li>
<li>[x] <a href="https://duruonanni.github.io/blog/Markdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/20170525/" title="Markdown" target="_blank" rel="external">Markdown语言的学习</a>,hexo中发布文章就是使用这个语言的,掌握好就能写出漂亮排版的文章;  </li>
<li>[ ] 英语,具备一定的英语基础,对之后的进阶,我认为是最重要的.能做到无障碍阅读英语文献,就能更容易理解编程建站中原理性的问题.<br>最后,若在依照本教程建站时出现任何问题,请留言或邮件联系我.<br>对本站有什么建议,也欢迎<strong>留言</strong>.</li>
</ul>
<p>喏,就这样啦~🐱‍👤</p>
<p><img src="http://storage.live.com/items/AEE68C12565C1619!174695:/Something_Just_Like_This.png?authkey=AJoh90nl3u6Wj4U" alt="somenoe just like this" title="Something_Just_Like_This"></p>
<!--参考文献:(不会出现在正文里)-->
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在之前的话&quot;&gt;&lt;a href=&quot;#写在之前的话&quot; class=&quot;headerlink&quot; title=&quot;写在之前的话&quot;&gt;&lt;/a&gt;写在之前的话&lt;/h2&gt;&lt;p&gt;本文是笔者在搭建本站时收集记录的建站过程.在搭建过程中,由于相关知识的匮缺,看不懂一些教程中省略的部分或是一
    
    </summary>
    
      <category term="教程" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
      <category term="教程" scheme="http://duruonanni.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo站点设置</title>
    <link href="http://duruonanni.com/Hexo%E7%AB%99%E7%82%B9%E8%AE%BE%E7%BD%AE/20170508.html"/>
    <id>http://duruonanni.com/Hexo站点设置/20170508.html</id>
    <published>2017-05-08T11:25:01.000Z</published>
    <updated>2017-05-26T09:04:42.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在之前的话"><a href="#写在之前的话" class="headerlink" title="写在之前的话"></a>写在之前的话</h2><p>本文主要结合我建站时的经历,对配置Hexo的<code>_config.yml</code>文件配置说明,以及hexo的常用指令的介绍.<br>本文适用于已通过各路Hexo教程完成建站后,需要了解Hexo站点设置的同学.若尚未完成建站,请先行阅读<strong><a href="https://duruonanni.github.io/blog/%E5%BB%BA%E7%AB%99%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/20170509/" title="Hexo建站流程" target="_blank" rel="external">todo:建站流程记录</a></strong>.<br>本文内容主要参考了:  </p>
<ul>
<li>Setsuna’s Blog:<a href="http://www.isetsuna.com/hexo/install-config/" title="Hexo博客系列" target="_blank" rel="external">Hexo博客系列</a>  </li>
<li>张学志の博客:<a href="http://blog.csdn.net/xuezhisdc/article/details/53130383" title="hexo配置教程" target="_blank" rel="external">hexo配置教程</a>  </li>
<li><a href="https://hexo.io/zh-cn/docs/configuration.html" title="hexo官方文档" target="_blank" rel="external">hexo官方文档</a><br>在此一并感谢~  </li>
</ul>
<p>由于笔者也是前端与建站的初学者,技浅才疏.如有错误或不足,还望批评指正~</p>
<h2 id="一-Blog文件夹详解"><a href="#一-Blog文件夹详解" class="headerlink" title="一. Blog文件夹详解"></a>一. Blog文件夹详解</h2><!--参考:https://hexo.io/zh-cn/docs/setup.html -->
<p>att:  </p>
<blockquote>
<ul>
<li><code>Blog</code>文件夹是我的Hexo初始化根目录名称</li>
<li>下面目录中<code>#</code>之后的内容是我写的注释,用于解释各个文件及文件夹的作用<h3 id="建站成功后-Blog文件夹内可见如下目录"><a href="#建站成功后-Blog文件夹内可见如下目录" class="headerlink" title="建站成功后,Blog文件夹内可见如下目录:"></a>建站成功后,Blog文件夹内可见如下目录:</h3></li>
</ul>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml 	<span class="meta"># Hexo的配置文件</span></div><div class="line">├── <span class="keyword">package</span>.json 	<span class="meta"># Hexo版本信息及插件信息</span></div><div class="line">├── .deploy_git 	<span class="meta"># </span></div><div class="line">├── node_modules 	<span class="meta"># </span></div><div class="line">├── <span class="keyword">public</span> 	<span class="meta"># 存放souce文件夹解析出的文件</span></div><div class="line">├── scaffolds 	<span class="meta"># 模板文件夹</span></div><div class="line">├── source 	<span class="meta"># 资源文件夹</span></div><div class="line">|   ├── _drafts <span class="meta"># 存放md格式的草稿文章,默认不发布草稿</span></div><div class="line">|   └── _posts <span class="meta"># 存放用于发布的md格式文章</span></div><div class="line">└── themes 	<span class="meta"># 主题文件</span></div></pre></td></tr></table></figure>
<h2 id="二-Hexo的-config-yml配置详解"><a href="#二-Hexo的-config-yml配置详解" class="headerlink" title="二. Hexo的_config.yml配置详解"></a>二. Hexo的_config.yml配置详解</h2><!-- 参考1:https://hexo.io/zh-cn/docs/configuration.html -->
<!--参考2:http://blog.csdn.net/xuezhisdc/article/details/53130383 -->
<h3 id="配置前的说明"><a href="#配置前的说明" class="headerlink" title="配置前的说明:"></a>配置前的说明:</h3><blockquote>
<ul>
<li>Hexo的_config.yml的储存位置: blog/_config.yml;</li>
<li>在改动配置前,请务必保存一份原始配置,确保出现故障可及时还原;</li>
<li>在配置文件时,冒号后面一定要加一个空格才能识别;</li>
<li>为方便对配置进行二次设置,可使用<code>#</code>对配置内容进行注释; </li>
<li>参考我在下面的注释,可帮助各位理解Hexo中<code>_config.yml</code>文件的配置;<!--一个句子后加两个空格换行有效,机智 -->
</li>
</ul>
</blockquote>
<h3 id="我的配置如下"><a href="#我的配置如下" class="headerlink" title="我的配置如下"></a>我的配置如下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Hexo Configuration 配置文件</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/configuration.html</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Source: https://github.com/hexojs/hexo/</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Site 网站标题</span></div><div class="line">title: 杜若喃呢</div><div class="line"><span class="meta">#</span><span class="bash"> 网站副标题</span></div><div class="line">subtitle: 山中人兮芳杜若</div><div class="line"><span class="meta">#</span><span class="bash"> 网站描述</span></div><div class="line">description: Life is a gift,never take it for granted.</div><div class="line"><span class="meta">#</span><span class="bash"> 网站作者</span></div><div class="line">author: Xiangyu Kong</div><div class="line"><span class="meta">#</span><span class="bash"> 网站语言:需要主题支持</span></div><div class="line">language: zh-Hans</div><div class="line"><span class="meta">#</span><span class="bash"> 时区,默认电脑本地时区</span></div><div class="line">timezone: Asia/Shanghai</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> URL 网址</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> 网址</span></div><div class="line">url: http://duruonanni.github.io</div><div class="line"><span class="meta">#</span><span class="bash"> 网站根目录.如果网站本身就在根目录下(比如我这样),不管他</span></div><div class="line">root: /</div><div class="line"><span class="meta">#</span><span class="bash"> 网站生成文件格式</span></div><div class="line">permalink: blog/:title/:year:month:day/</div><div class="line">permalink_defaults:</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Directory 配置目录名(通常没必要修改)</span></div><div class="line"><span class="meta">#</span><span class="bash"> 资源文件夹，放在里面的文件会上传到github中</span></div><div class="line">source_dir: source</div><div class="line"><span class="meta">#</span><span class="bash"> 公共文件夹，存放生成的静态文件</span></div><div class="line">public_dir: public</div><div class="line"><span class="meta">#</span><span class="bash"> 标签文件夹，默认是tags.实际存放在<span class="built_in">source</span>/tags中</span></div><div class="line">tag_dir: tags</div><div class="line"><span class="meta">#</span><span class="bash"> 档案文件夹，默认是archives</span></div><div class="line">archive_dir: archives</div><div class="line"><span class="meta">#</span><span class="bash"> 类别文件夹，默认是categories.实际存放在<span class="built_in">source</span>/categories中</span></div><div class="line">category_dir: categories</div><div class="line"><span class="meta">#</span><span class="bash"> 代码文件夹，默认是downloads/code</span></div><div class="line">code_dir: downloads/code</div><div class="line"><span class="meta">#</span><span class="bash"> 语言文件夹,默认跟language相同</span></div><div class="line">i18n_dir: :lang</div><div class="line"><span class="meta">#</span><span class="bash"> 不需要渲染的文件,可使用glob表达式来匹配路径。</span></div><div class="line">skip_render: [Readme.md]</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Writing 文章内容</span></div><div class="line"><span class="meta">#</span><span class="bash"> File name of new posts 新文章名称</span></div><div class="line">new_post_name: :title.md</div><div class="line"><span class="meta">#</span><span class="bash"> 默认布局 除了post外,Hexo默认还支持page和draft布局</span></div><div class="line">default_layout: post</div><div class="line"><span class="meta">#</span><span class="bash"> Transform title into titlecase 把标题转换为 titlecase</span></div><div class="line">titlecase: false</div><div class="line"><span class="meta">#</span><span class="bash"> 新标签打开方式,<span class="literal">true</span>是打开一个外部链接</span></div><div class="line">external_link: true</div><div class="line"><span class="meta">#</span><span class="bash"> 转换文件名,值为0不转,1小写,2大写</span></div><div class="line">filename_case: 0</div><div class="line"><span class="meta">#</span><span class="bash"> 显示草稿</span></div><div class="line">render_drafts: false</div><div class="line"><span class="meta">#</span><span class="bash"> 启用 Asset 文件夹</span></div><div class="line">post_asset_folder: false</div><div class="line"><span class="meta">#</span><span class="bash"> 把链接改为与根目录的相对位址</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 默认情况下，Hexo生成的超链接都是绝对地址.通常情况下，建议如此</span></span></div><div class="line">relative_link: false</div><div class="line"><span class="meta">#</span><span class="bash"> 显示未来的文章</span></div><div class="line">future: true</div><div class="line"><span class="meta">#</span><span class="bash"> 代码高亮</span></div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Category &amp; Tag 分类 &amp; 标签</span></div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Date / Time format 日期 / 时间格式 </span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Hexo 使用 Moment.js 来解析和显示时间</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Hexo uses Moment.js to parse and display date</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># You can customize the date format as defined in</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># http://momentjs.com/docs/#/displaying/format/</span></span></div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Pagination 分页</span></div><div class="line"><span class="meta">#</span><span class="bash"> 0则关闭分页功能,全部在1页</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Set per_page to 0 to disable pagination 设置每页显示文章量</span></span></div><div class="line">per_page: 10</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 分页路径，在public中可以看到</span></span></div><div class="line">pagination_dir: page</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Extensions 扩展插件</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></div><div class="line">plugins: </div><div class="line"><span class="meta">#</span><span class="bash"> 生成RSS的插件</span></div><div class="line"> -hexo-generator-feed</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> 主题</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></div><div class="line"><span class="meta">#</span><span class="bash">theme: <span class="literal">false</span> <span class="comment">#禁用主题</span></span></div><div class="line"><span class="meta">#</span><span class="bash">theme: landscape <span class="comment">#默认主题</span></span></div><div class="line">theme: next</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Deployment</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 发布</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line"><span class="meta">  #</span><span class="bash"> 部署到github上</span></div><div class="line">  repository: https://github.com/duruonanni/duruonanni.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h2 id="三-Hexo常用指令"><a href="#三-Hexo常用指令" class="headerlink" title="三. Hexo常用指令"></a>三. Hexo常用指令</h2><p>ATT:  </p>
<ul>
<li>以下指令建议在<code>Git bash</code>中操作,不建议用CMD;  </li>
</ul>
<h3 id="1-init-初始化一个网站"><a href="#1-init-初始化一个网站" class="headerlink" title="1. init # 初始化一个网站"></a>1. init # 初始化一个网站</h3><blockquote>
<p>语法:     <code>hexo init [folder]</code><br>说明:     <code>folder</code> 是网站在本地储存使用的文件夹名,我用的是blog<br>ATT:  </p>
<ul>
<li>一旦配置好_config.yml文件,请不要轻易在blog文件夹使用该命令,这会导致配置文件重置;</li>
<li>在操作中输入folder内容时不用加<code>[]</code>符号,下面的所有指令中的<code>[]</code>,<code>&lt;&gt;</code>也不需要加;</li>
<li>如果需要输入的指令内容(eg: 文章名)包含空格,可用<code>-</code>替代或将所有内容用<code>&#39;&#39;</code>包起来;  </li>
<li>使用此语法前,请先将’Git bash’定位到该用于存储blog文件的文件夹中</li>
</ul>
</blockquote>
<h3 id="2-generate-生成网站的静态文件"><a href="#2-generate-生成网站的静态文件" class="headerlink" title="2. generate # 生成网站的静态文件"></a>2. generate # 生成网站的静态文件</h3><blockquote>
<p>语法:     <code>hexo generate</code><br>说明:     可简写成 <code>hexo g</code></p>
</blockquote>
<h3 id="3-new-新建文章"><a href="#3-new-新建文章" class="headerlink" title="3. new # 新建文章"></a>3. new # 新建文章</h3><blockquote>
<p>语法:     <code>hexo new &lt;title&gt;</code><br>说明: </p>
<ul>
<li><code>title</code>写文章名</li>
<li>此语法默认会将新建的文章放到<code>blog--souce--_posts</code>文件夹中,你可以在新建的文章中使用Markdown语法编辑内容,最终<code>_posts</code>文件夹中的文章会默认以时间顺序发布到你的网站上面.<br>ATT: </li>
<li>Hexo中文章的文本格式需要是Markdown(后缀名<code>.md</code>)</li>
<li>关于Markdown的常用语法,可参见我近期的总结<a href="https://duruonanni.github.io/blog/Markdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/20170525/" title="Markdown" target="_blank" rel="external">Markdown语法练习</a></li>
<li>这里更推荐以<code>发表草稿</code>的方式新建文章,具体方法如下:  <blockquote>
<ul>
<li>使用语法: <code>hexo new draft &lt;title&gt;</code> 将文章新建到<em>blog–souce–_drafts</em>文件夹中,你可以在此处对文章进行编辑.待确认发布时,使用语法:<code>hexo publish draft &lt;filename&gt;</code>,可将选定的文章传到<code>_posts</code>文件夹.  </li>
<li>这样的好处是,可以先给文章打好草稿,直接推送写好的成品.可避免未写完的文章放到电脑其他位置弄乱弄丢.(不建议直接在<code>_posts</code>文件夹中编辑文章)  </li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="4-server-启动服务器"><a href="#4-server-启动服务器" class="headerlink" title="4. server # 启动服务器"></a>4. server # 启动服务器</h3><blockquote>
<p>语法:     <code>hexo server</code> 可简写成 <code>hexo s</code><br>说明:     启动服务器,使站点可通过浏览器,在网址:<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>  预览站点.按<strong>ctrl+c</strong>结束预览<br>ATT:</p>
<ul>
<li>启用此语法后,能看到站点中你事先编辑好的内容,此时改变blog文件夹中内容不会在站点内体现,需要退出后再次启动才能看到变动.</li>
<li>为实时对站点内容进行调整,可使用语法:<code>hexo server --debug</code>进入本地调试模式,并将调试日志写入<strong>debug.log</strong>文件中.此时做出的所有调整都能在网站上动态体现.</li>
</ul>
</blockquote>
<h3 id="5-deoloy-部署网站"><a href="#5-deoloy-部署网站" class="headerlink" title="5. deoloy # 部署网站"></a>5. deoloy # 部署网站</h3><blockquote>
<p>语法:     <code>hexo deploy</code> 可简写成 <code>hexo d</code><br>说明:     将站点内容部署到服务器上,使所有人能通过域名访问新发布的文章<br>ATT:     建议使用 ‘hexo d -g’ 语法,在部署之前预先生成静态文件.  </p>
</blockquote>
<p>至此:完~🐱‍👤 </p>
<p><img src="http://storage.live.com/items/AEE68C12565C1619!174679:/YuYu Hakusho.jpg?authkey=AJoh90nl3u6Wj4U" alt="YoYo hakuso"></p>
<!--参考:(不会出现在正文里)-->
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在之前的话&quot;&gt;&lt;a href=&quot;#写在之前的话&quot; class=&quot;headerlink&quot; title=&quot;写在之前的话&quot;&gt;&lt;/a&gt;写在之前的话&lt;/h2&gt;&lt;p&gt;本文主要结合我建站时的经历,对配置Hexo的&lt;code&gt;_config.yml&lt;/code&gt;文件配置说明,以
    
    </summary>
    
      <category term="教程" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo" scheme="http://duruonanni.com/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
      <category term="教程" scheme="http://duruonanni.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://duruonanni.com/hello-world/20170504.html"/>
    <id>http://duruonanni.com/hello-world/20170504.html</id>
    <published>2017-05-04T14:50:41.679Z</published>
    <updated>2017-05-08T11:13:08.181Z</updated>
    
    <content type="html"><![CDATA[<p>In C# we say:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> Main(<span class="keyword">string</span>[] args)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">Console</span>.Writeline(<span class="string">"Hello world"</span>);</div><div class="line">	<span class="built_in">Console</span>.Readkey();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In HTML we say:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	Hello world</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">htme</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In C# we say:&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;
    
    </summary>
    
    
  </entry>
  
</feed>
